{
  "address": "0x8c583E6EF57E73f8A5057F266BBb713D3F690e47",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_svgRender_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_traitsFetch_",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "external_link",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "seller_fee_basis_points",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fee_recipient",
              "type": "string"
            }
          ],
          "internalType": "struct ERC721Storage.ContractURI",
          "name": "_contractURI_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "constructContractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "input0",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "input1",
          "type": "bytes"
        }
      ],
      "name": "constructTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSvgRender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTraitsFetch",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "preview",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xecf9616eb8e9784dd9e9ad122f63f630666fe2f172cbe36e4526af49bf62fe53",
  "receipt": {
    "to": null,
    "from": "0x9342d17D9161d642F73aE9Feebb627F46F1029C5",
    "contractAddress": "0x8c583E6EF57E73f8A5057F266BBb713D3F690e47",
    "transactionIndex": 0,
    "gasUsed": "1056830",
    "logsBloom": "0x
    "blockHash": "0xc647cd02598892df5c26a0b77a11f297e475d241eb46b0198b3d4b5d6a895566",
    "transactionHash": "0xecf9616eb8e9784dd9e9ad122f63f630666fe2f172cbe36e4526af49bf62fe53",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 15252502,
        "transactionHash": "0xecf9616eb8e9784dd9e9ad122f63f630666fe2f172cbe36e4526af49bf62fe53",
        "address": "0x8c583E6EF57E73f8A5057F266BBb713D3F690e47",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009342d17d9161d642f73ae9feebb627f46f1029c5"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc647cd02598892df5c26a0b77a11f297e475d241eb46b0198b3d4b5d6a895566"
      }
    ],
    "blockNumber": 15252502,
    "cumulativeGasUsed": "1056830",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE5D37a2eBE3e917Db52A35f248576e1EE4C886Fd",
    "0x0000000000000000000000000000000000000000",
    {
      "name": "ENounsRender",
      "description": "ENounsRender",
      "image": "https://raw.githubusercontent.com/ENounsRender/ENounsRender/master/logo.png",
      "external_link": "https://ENounsRender.com",
      "seller_fee_basis_points": "0",
      "fee_recipient": "0x0000000000000000000000000000000000000000"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "bbd9a653e7516b4e458dabe2ad1b4fce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_svgRender_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_traitsFetch_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"external_link\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"seller_fee_basis_points\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fee_recipient\",\"type\":\"string\"}],\"internalType\":\"struct ERC721Storage.ContractURI\",\"name\":\"_contractURI_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"constructContractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"input0\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"input1\",\"type\":\"bytes\"}],\"name\":\"constructTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSvgRender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTraitsFetch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"preview\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kames Geraghty\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ERC721Storage\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"preview(bytes)\":{\"notice\":\"Given an address, construct a base64 encoded SVG image.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC721Storage.sol\":\"ERC721Storage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport { Base64 } from \\\"base64-sol/base64.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ISVGRender } from \\\"./interfaces/ISVGRender.sol\\\";\\nimport { ITraitsFetch } from \\\"./interfaces/ITraitsFetch.sol\\\";\\n\\n/**\\n * @title ERC721Storage\\n * @author Kames Geraghty\\n */\\ncontract ERC721Storage is Ownable {\\n  address internal _svgRender;\\n  address internal _traitsFetch;\\n  ContractURI internal _contractURI;\\n\\n  struct ContractURI {\\n    string name;\\n    string description;\\n    string image;\\n    string external_link;\\n    string seller_fee_basis_points;\\n    string fee_recipient;\\n  }\\n\\n  constructor(\\n    address _svgRender_,\\n    address _traitsFetch_,\\n    ContractURI memory _contractURI_\\n  ) {\\n    _svgRender = _svgRender_;\\n    _traitsFetch = _traitsFetch_;\\n    _contractURI = _contractURI_;\\n  }\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n  function getSvgRender() external view returns (address) {\\n    return _svgRender;\\n  }\\n\\n  function getTraitsFetch() external view returns (address) {\\n    return _traitsFetch;\\n  }\\n\\n  /**\\n   * @notice Given an address, construct a base64 encoded SVG image.\\n   */\\n  function preview(bytes memory input) public view returns (string memory) {\\n    return ISVGRender(_svgRender).render(input);\\n  }\\n\\n  function constructTokenURI(\\n    uint256 tokenId,\\n    bytes memory input0,\\n    bytes memory input1\\n  ) external view returns (string memory uri) {\\n    string memory image_ = ISVGRender(_svgRender).render(input0);\\n    // string memory traits_ = ITraitsFetch(_svgRender).fetch(input1);\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              string.concat(\\n                '{\\\"name\\\":',\\n                '\\\"',\\n                _parseName(tokenId),\\n                '\\\",',\\n                '\\\"description\\\":',\\n                '\\\"',\\n                _parseDescription(tokenId),\\n                '\\\",',\\n                '\\\"image\\\":',\\n                '\\\"',\\n                image_,\\n                '\\\",',\\n                '\\\"attributes\\\": [',\\n                // traits_,\\n                \\\"]\\\",\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function constructContractURI() external view returns (string memory uri) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              string.concat(\\n                '{\\\"name\\\":',\\n                '\\\"',\\n                _contractURI.name,\\n                '\\\",',\\n                '\\\"description\\\":',\\n                '\\\"',\\n                _contractURI.description,\\n                '\\\",',\\n                '\\\"image\\\":',\\n                '\\\"',\\n                _contractURI.image,\\n                '\\\",',\\n                '\\\"external_link\\\":',\\n                '\\\"',\\n                _contractURI.external_link,\\n                '\\\",',\\n                '\\\"seller_fee_basis_points\\\":',\\n                '\\\"',\\n                _contractURI.seller_fee_basis_points,\\n                '\\\",',\\n                '\\\"fee_recipient\\\":',\\n                '\\\"',\\n                _contractURI.fee_recipient,\\n                '\\\"',\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Internal Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function _parseName(uint256 _tokenId) internal view returns (string memory) {\\n    return \\\"ERC721K\\\";\\n  }\\n\\n  function _parseDescription(uint256 _tokenId) internal view returns (string memory) {\\n    return \\\"ERC721K\\\";\\n  }\\n}\\n\",\"keccak256\":\"0xd3ab5240dd9c74480b6a7a638d5987f6cae390295370aa9e432b2034783b00a6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISVGRender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface ISVGRender {\\n  function render(bytes memory input) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x40b1890b472a84f0867a826065039eb787f1f3c4f1a79a71b877752c70152967\",\"license\":\"MIT\"},\"contracts/interfaces/ITraitsFetch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface ITraitsFetch {\\n  function fetch(bytes memory input) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x8454d6dcf4c798032b7459026b6fa23f586b76400175a27c9b100c1aca36c5a9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063a3f22a201161005b578063a3f22a20146100eb578063b3517350146100fc578063f06796161461010f578063f2fde38b1461012257600080fd5b8063715018a61461008d578063725fa09c146100975780638da5cb5b146100b55780639a17092a146100da575b600080fd5b610095610135565b005b61009f6101a0565b6040516100ac9190610656565b60405180910390f35b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100ac565b6001546001600160a01b03166100c2565b6002546001600160a01b03166100c2565b61009f61010a366004610735565b610200565b61009f61011d366004610772565b61027c565b6100956101303660046107df565b61037a565b6000546001600160a01b031633146101945760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61019e6000610445565b565b6040516060906101dc906101c8906003906004906005906006906007906008906020016108a5565b604051602081830303815290604052610495565b6040516020016101ec9190610a2d565b604051602081830303815290604052905090565b6001546040516318b6fb0f60e11b81526060916001600160a01b03169063316df61e90610231908590600401610656565b600060405180830381865afa15801561024e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102769190810190610a72565b92915050565b6001546040516318b6fb0f60e11b81526060916000916001600160a01b039091169063316df61e906102b2908790600401610656565b600060405180830381865afa1580156102cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102f79190810190610a72565b90506103516103206040805180820190915260078152664552433732314b60c81b602082015290565b6040805180820190915260078152664552433732314b60c81b6020820152836040516020016101c893929190610ae9565b6040516020016103619190610a2d565b6040516020818303038152906040529150509392505050565b6000546001600160a01b031633146103d45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161018b565b6001600160a01b0381166104395760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161018b565b61044281610445565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606081516000036104b457505060408051602081019091526000815290565b6000604051806060016040528060408152602001610c3d60409139905060006003845160026104e39190610be3565b6104ed9190610bfb565b6104f8906004610c1d565b90506000610507826020610be3565b67ffffffffffffffff81111561051f5761051f610670565b6040519080825280601f01601f191660200182016040528015610549576020820181803683370190505b509050818152600183018586518101602084015b818310156105b5576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f811685015182535060010161055d565b6003895106600181146105cf57600281146105e0576105ec565b613d3d60f01b6001198301526105ec565b603d60f81b6000198301525b509398975050505050505050565b60005b838110156106155781810151838201526020016105fd565b83811115610624576000848401525b50505050565b600081518084526106428160208601602086016105fa565b601f01601f19169290920160200192915050565b602081526000610669602083018461062a565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156106af576106af610670565b604052919050565b600067ffffffffffffffff8211156106d1576106d1610670565b50601f01601f191660200190565b600082601f8301126106f057600080fd5b81356107036106fe826106b7565b610686565b81815284602083860101111561071857600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561074757600080fd5b813567ffffffffffffffff81111561075e57600080fd5b61076a848285016106df565b949350505050565b60008060006060848603121561078757600080fd5b83359250602084013567ffffffffffffffff808211156107a657600080fd5b6107b2878388016106df565b935060408601359150808211156107c857600080fd5b506107d5868287016106df565b9150509250925092565b6000602082840312156107f157600080fd5b81356001600160a01b038116811461066957600080fd5b8054600090600181811c908083168061082257607f831692505b6020808410820361084357634e487b7160e01b600052602260045260246000fd5b818015610857576001811461086c57610899565b60ff1986168952841515850289019650610899565b60008881526020902060005b868110156108915781548b820152908501908301610878565b505084890196505b50505050505092915050565b673d913730b6b2911d60c11b8152601160f91b600882015260006108cc6009830189610808565b61088b60f21b815260026108f28183016d113232b9b1b934b83a34b7b7111d60911b9052565b601160f91b6010830152610909601183018a610808565b61088b60f21b81529150671134b6b0b3b2911d60c11b82820152601160f91b600a83015261093a600b830189610808565b61088b60f21b815291506f1132bc3a32b93730b62fb634b735911d60811b82820152601160f91b60128301526109736013830188610808565b61088b60f21b815291507f2273656c6c65725f6665655f62617369735f706f696e7473223a00000000000082820152601160f91b601c8301526109b9601d830187610808565b61088b60f21b815291506f113332b2afb932b1b4b834b2b73a111d60811b82820152601160f91b60128301526109f26013830186610808565b601160f91b8152607d60f81b6001820152019998505050505050505050565b60008151610a238185602086016105fa565b9290920192915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251610a6581601d8501602087016105fa565b91909101601d0192915050565b600060208284031215610a8457600080fd5b815167ffffffffffffffff811115610a9b57600080fd5b8201601f81018413610aac57600080fd5b8051610aba6106fe826106b7565b818152856020838501011115610acf57600080fd5b610ae08260208301602086016105fa565b95945050505050565b673d913730b6b2911d60c11b8152601160f91b60088201528351600090610b178160098501602089016105fa565b61088b60f21b6009918401918201526d113232b9b1b934b83a34b7b7111d60911b600b820152610b4d60198201601160f91b9052565b610b5a601a820186610a11565b61088b60f21b81529050671134b6b0b3b2911d60c11b6002820152601160f91b600a820152610b8c600b820185610a11565b61088b60f21b81526e2261747472696275746573223a205b60881b6002820152605d60f81b6011820152607d60f81b60128201526013019695505050505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610bf657610bf6610bcd565b500190565b600082610c1857634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610c3757610c37610bcd565b50029056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122028fa9a7bf6673cd4827854b630b18fa3d6a5d8fb0c304910ac9ed51c255d24c764736f6c634300080f0033",
  "devdoc": {
    "author": "Kames Geraghty",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ERC721Storage",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "preview(bytes)": {
        "notice": "Given an address, construct a base64 encoded SVG image."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ERC721Storage.sol:ERC721Storage",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2603,
        "contract": "contracts/ERC721Storage.sol:ERC721Storage",
        "label": "_svgRender",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2605,
        "contract": "contracts/ERC721Storage.sol:ERC721Storage",
        "label": "_traitsFetch",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2608,
        "contract": "contracts/ERC721Storage.sol:ERC721Storage",
        "label": "_contractURI",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(ContractURI)2621_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ContractURI)2621_storage": {
        "encoding": "inplace",
        "label": "struct ERC721Storage.ContractURI",
        "members": [
          {
            "astId": 2610,
            "contract": "contracts/ERC721Storage.sol:ERC721Storage",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2612,
            "contract": "contracts/ERC721Storage.sol:ERC721Storage",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2614,
            "contract": "contracts/ERC721Storage.sol:ERC721Storage",
            "label": "image",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2616,
            "contract": "contracts/ERC721Storage.sol:ERC721Storage",
            "label": "external_link",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2618,
            "contract": "contracts/ERC721Storage.sol:ERC721Storage",
            "label": "seller_fee_basis_points",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2620,
            "contract": "contracts/ERC721Storage.sol:ERC721Storage",
            "label": "fee_recipient",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      }
    }
  }
}
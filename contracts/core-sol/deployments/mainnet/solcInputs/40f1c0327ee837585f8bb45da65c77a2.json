{
  "language": "Solidity",
  "sources": {
    "contracts/ENounders/ChaosWolf.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport { Base64 } from \"base64-sol/base64.sol\";\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { ERC721 } from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\n/**\n * @title ChaosWolf\n * @author Kames Geraghty\n * @notice Unleash the chaos.\n */\ncontract ChaosWolf is ERC721, Ownable {\n  string private _imageURI;\n  ContractURI internal _contractURI;\n\n  struct ContractURI {\n    string name;\n    string description;\n    string image;\n    string externalLink;\n    string sellerFeeBasisPoints;\n    string feeRecipient;\n  }\n\n  /**\n   * @notice ChaosWolf Construction\n   * @param name string - Name of ERC721 token\n   * @param symbol string - Symbol of ERC721 token\n   * @param contractURI ContractURI - Contract URI for the token\n   * @param imageURI string - Image URI for the token\n   */\n  constructor(\n    string memory name,\n    string memory symbol,\n    ContractURI memory contractURI,\n    string memory imageURI,\n    address _owner\n  ) ERC721(name, symbol) {\n    _contractURI = contractURI;\n    _imageURI = imageURI;\n    _mint(_owner, 0);\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  function setImageURI(string memory imageURI) external {\n    _imageURI = imageURI;\n  }\n\n  function setContractURI(ContractURI memory contractURI) external {\n    _contractURI = contractURI;\n  }\n\n  function tokenURI(uint256) public view virtual override returns (string memory uri) {\n    return\n      string(\n        abi.encodePacked(\n          \"data:application/json;base64,\",\n          Base64.encode(\n            bytes(\n              string.concat(\n                '{\"name\":',\n                '\"',\n                \"Wolf\",\n                '\",',\n                '\"description\":',\n                '\"',\n                \"Unleash the chaos.\",\n                '\",',\n                '\"image\":',\n                '\"',\n                _imageURI,\n                '\",',\n                '\"attributes\": [',\n                _generateTrait(\"pack\", \"true\"),\n                \"]\",\n                \"}\"\n              )\n            )\n          )\n        )\n      );\n  }\n\n  function contractURI() external view returns (string memory uri) {\n    return\n      string(\n        abi.encodePacked(\n          \"data:application/json;base64,\",\n          Base64.encode(\n            bytes(\n              string.concat(\n                '{\"name\":',\n                '\"',\n                _contractURI.name,\n                '\",',\n                '\"description\":',\n                '\"',\n                _contractURI.description,\n                '\",',\n                '\"image\":',\n                '\"',\n                _contractURI.image,\n                '\",',\n                '\"externalLink\":',\n                '\"',\n                _contractURI.externalLink,\n                '\",',\n                '\"sellerFeeBasisPoints\":',\n                '\"',\n                _contractURI.sellerFeeBasisPoints,\n                '\",',\n                '\"feeRecipient\":',\n                '\"',\n                _contractURI.feeRecipient,\n                '\"',\n                \"}\"\n              )\n            )\n          )\n        )\n      );\n  }\n\n  function release() external onlyOwner {\n    selfdestruct(payable(msg.sender));\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n\n  function _generateTrait(string memory _key, string memory _value)\n    internal\n    pure\n    returns (string memory __traits)\n  {\n    return string.concat('{\"trait_type\":' '\"', _key, '\",', '\"value\":', '\"', _value, '\"}');\n  }\n}\n"
    },
    "base64-sol/base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides functions for encoding/decoding base64\nlibrary Base64 {\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    bytes  internal constant TABLE_DECODE = hex\"0000000000000000000000000000000000000000000000000000000000000000\"\n                                            hex\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\"\n                                            hex\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\"\n                                            hex\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\";\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n\n        // load the table into memory\n        string memory table = TABLE_ENCODE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n                // read 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n\n        return result;\n    }\n\n    function decode(string memory _data) internal pure returns (bytes memory) {\n        bytes memory data = bytes(_data);\n\n        if (data.length == 0) return new bytes(0);\n        require(data.length % 4 == 0, \"invalid base64 decoder input\");\n\n        // load the table into memory\n        bytes memory table = TABLE_DECODE;\n\n        // every 4 characters represent 3 bytes\n        uint256 decodedLen = (data.length / 4) * 3;\n\n        // add some extra buffer at the end required for the writing\n        bytes memory result = new bytes(decodedLen + 32);\n\n        assembly {\n            // padding with '='\n            let lastBytes := mload(add(data, mload(data)))\n            if eq(and(lastBytes, 0xFF), 0x3d) {\n                decodedLen := sub(decodedLen, 1)\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\n                    decodedLen := sub(decodedLen, 1)\n                }\n            }\n\n            // set the actual output length\n            mstore(result, decodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 4 characters at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               // read 4 characters\n               dataPtr := add(dataPtr, 4)\n               let input := mload(dataPtr)\n\n               // write 3 bytes\n               let output := add(\n                   add(\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\n                   add(\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\n                    )\n                )\n                mstore(resultPtr, shl(232, output))\n                resultPtr := add(resultPtr, 3)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/ERC721K.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { ERC721 } from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport { ERC721Storage } from \"./ERC721Storage.sol\";\n\n/**\n * @title ERC721K\n * @author Kames Geraghty\n */\nabstract contract ERC721K is ERC721, Ownable {\n  /// @notice ID counter for ERC721 tokens\n  uint256 internal _idCounter;\n\n  /// @notice ENSReverseRecords instance\n  address internal _erc721Storage;\n\n  event ERC721StorageUpdated(address erc721Storage);\n\n  /**\n   * @notice ERC721K Construction\n   * @param name_ string - Name of ERC721 token\n   * @param symbol_ string - Symbol of ERC721 token\n   * @param _erc721Storage_ address - Metadata instance\n   */\n  constructor(\n    string memory name_,\n    string memory symbol_,\n    address _erc721Storage_\n  ) ERC721(name_, symbol_) {\n    _erc721Storage = _erc721Storage_;\n  }\n\n  /* ===================================================================================== */\n  /* Virtual Functions                                                                     */\n  /* ===================================================================================== */\n  function _tokenData(uint256 tokenId)\n    internal\n    view\n    virtual\n    returns (bytes memory output0_, bytes memory output1_);\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  function contractURI() external view returns (string memory) {\n    return ERC721Storage(_erc721Storage).constructContractURI();\n  }\n\n  function totalSupply() external view returns (uint256) {\n    return _idCounter;\n  }\n\n  function getERC721Storage() external view returns (address) {\n    return _erc721Storage;\n  }\n\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\n    (bytes memory input0, bytes memory input1) = _tokenData(tokenId);\n    return ERC721Storage(_erc721Storage).constructTokenURI(tokenId, input0, input1);\n  }\n\n  function setStorage(address erc721Storage) external onlyOwner {\n    _erc721Storage = erc721Storage;\n    emit ERC721StorageUpdated(erc721Storage);\n  }\n\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(ERC721)\n    returns (bool)\n  {\n    return super.supportsInterface(interfaceId);\n  }\n}\n"
    },
    "contracts/ERC721Storage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport { Base64 } from \"base64-sol/base64.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { ISVGRender } from \"./interfaces/ISVGRender.sol\";\nimport { ITraitsFetch } from \"./interfaces/ITraitsFetch.sol\";\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\n\n/**\n * @title ERC721Storage\n * @author Kames Geraghty\n */\nabstract contract ERC721Storage is Ownable {\n  address internal _svgRender;\n  address internal _traitsFetch;\n  ContractURI internal _contractURI;\n\n  struct ContractURI {\n    string name;\n    string description;\n    string image;\n    string externalLink;\n    string sellerFeeBasisPoints;\n    string feeRecipient;\n  }\n\n  event SvgRenderUpdated(address svgRender);\n\n  event TraitsFetchUpdated(address traitsFetch);\n\n  event ContractURIUpdated(ContractURI contractURI);\n\n  constructor(\n    address _svgRender_,\n    address _traitsFetch_,\n    ContractURI memory _contractURI_\n  ) {\n    _svgRender = _svgRender_;\n    _traitsFetch = _traitsFetch_;\n    _contractURI = _contractURI_;\n  }\n\n  /* ===================================================================================== */\n  /* Virtual Functions                                                                     */\n  /* ===================================================================================== */\n\n  function _parseName(uint256 _tokenId) internal view virtual returns (string memory);\n\n  function _parseDescription(uint256 _tokenId) internal view virtual returns (string memory);\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n  function getSvgRender() external view returns (address) {\n    return _svgRender;\n  }\n\n  function getTraitsFetch() external view returns (address) {\n    return _traitsFetch;\n  }\n\n  function getContractDescription() external view returns (ContractURI memory) {\n    return _contractURI;\n  }\n\n  function preview(bytes memory input) external view returns (string memory) {\n    return ISVGRender(_svgRender).render(input);\n  }\n\n  function constructTokenURI(\n    uint256 tokenId,\n    bytes memory input0,\n    bytes memory input1\n  ) external view returns (string memory uri) {\n    string memory image_ = ISVGRender(_svgRender).render(input0);\n    string memory traits_ = ITraitsFetch(_traitsFetch).fetch(input1);\n    return\n      string(\n        abi.encodePacked(\n          \"data:application/json;base64,\",\n          Base64.encode(\n            bytes(\n              string.concat(\n                '{\"name\":',\n                '\"',\n                _parseName(tokenId),\n                '\",',\n                '\"description\":',\n                '\"',\n                _parseDescription(tokenId),\n                '\",',\n                '\"image\":',\n                '\"',\n                image_,\n                '\",',\n                '\"attributes\": [',\n                traits_,\n                \"]\",\n                \"}\"\n              )\n            )\n          )\n        )\n      );\n  }\n\n  function constructContractURI() external view returns (string memory uri) {\n    return\n      string(\n        abi.encodePacked(\n          \"data:application/json;base64,\",\n          Base64.encode(\n            bytes(\n              string.concat(\n                '{\"name\":',\n                '\"',\n                _contractURI.name,\n                '\",',\n                '\"description\":',\n                '\"',\n                _contractURI.description,\n                '\",',\n                '\"image\":',\n                '\"',\n                _contractURI.image,\n                '\",',\n                '\"externalLink\":',\n                '\"',\n                _contractURI.externalLink,\n                '\",',\n                '\"sellerFeeBasisPoints\":',\n                '\"',\n                _contractURI.sellerFeeBasisPoints,\n                '\",',\n                '\"feeRecipient\":',\n                '\"',\n                _contractURI.feeRecipient,\n                '\"',\n                \"}\"\n              )\n            )\n          )\n        )\n      );\n  }\n\n  function setSvgRender(address svgRender) external onlyOwner {\n    _svgRender = svgRender;\n    emit SvgRenderUpdated(svgRender);\n  }\n\n  function setTraitsFetch(address traitsFetch) external onlyOwner {\n    _traitsFetch = traitsFetch;\n    emit TraitsFetchUpdated(traitsFetch);\n  }\n\n  function setContractURI(ContractURI memory contractURI) external onlyOwner {\n    _contractURI = contractURI;\n    emit ContractURIUpdated(contractURI);\n  }\n}\n"
    },
    "contracts/interfaces/ISVGRender.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface ISVGRender {\n  function render(bytes memory input) external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/ITraitsFetch.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface ITraitsFetch {\n  function fetch(bytes memory input) external view returns (string memory);\n}\n"
    },
    "contracts/ENounsStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\nimport { ERC721Storage } from \"./ERC721Storage.sol\";\n\n/**\n * @title ENounsStorage\n * @author Kames Geraghty\n */\ncontract ENounsStorage is ERC721Storage {\n  constructor(\n    address _svgRender_,\n    address _traitsFetch_,\n    ContractURI memory _contractURI_\n  ) ERC721Storage(_svgRender_, _traitsFetch_, _contractURI_) {}\n\n  function _parseName(uint256 _tokenId) internal view override returns (string memory) {\n    return string.concat(\"eNouns #\", Strings.toString(_tokenId));\n  }\n\n  function _parseDescription(uint256 _tokenId) internal view override returns (string memory) {\n    return\n      string.concat(\n        \"Member #\",\n        Strings.toString(_tokenId),\n        \" of the Ethereum Noun System art club.\"\n      );\n  }\n}\n"
    },
    "contracts/libraries/SVGUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n/**\n  * @title  SVG Utilities\n  * @author Kames Geraghty\n  * @notice The SVG Utilities Library provides functions for constructing SVG; format CSS and numbers.\n  * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\n*/\nlibrary svgUtils {\n    using Strings for uint256;\n    using Strings for uint8;\n    \n    /// @notice Empty SVG element\n    string internal constant NULL = \"\";\n\n    /**\n     * @notice Formats a CSS variable line. Includes a semicolon for formatting.\n     * @param _key User for which to calculate prize amount.\n     * @param _val User for which to calculate prize amount.\n     * @return string Generated CSS variable.\n    */\n    function setCssVar(string memory _key, string memory _val)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat(\"--\", _key, \":\", _val, \";\");\n    }\n\n    /**\n     * @notice Formats getting a css variable\n     * @param _key User for which to calculate prize amount.\n     * @return string Generated CSS variable.\n    */\n    function getCssVar(string memory _key)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat(\"var(--\", _key, \")\");\n    }\n\n    // formats getting a def URL\n    function getDefURL(string memory _id)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat(\"url(#\", _id, \")\");\n    }\n\n    // checks if two strings are equal\n    function stringsEqual(string memory _a, string memory _b)\n        internal\n        pure\n        returns (bool)\n    {\n        return\n            keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\n    }\n\n    // returns the length of a string in characters\n    function utfStringLength(string memory _str)\n        internal\n        pure\n        returns (uint256 length)\n    {\n        uint256 i = 0;\n        bytes memory string_rep = bytes(_str);\n\n        while (i < string_rep.length) {\n            if (string_rep[i] >> 7 == 0) i += 1;\n            else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\n            else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\n            else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\n                i += 4;\n                //For safety\n            else i += 1;\n\n            length++;\n        }\n    }\n\n    function round2Txt(\n        uint256 _value,\n        uint8 _decimals,\n        uint8 _prec\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(\n            (_value / 10 ** _decimals).toString(), \n            \".\",\n            ( _value / 10 ** (_decimals - _prec) -\n                _value / 10 ** (_decimals ) * 10 ** _prec\n            ).toString()\n        );\n    }\n\n     // converts an unsigned integer to a string\n     function uint2str(uint256 _i)\n     internal\n     pure\n     returns (string memory _uintAsString)\n {\n     if (_i == 0) {\n         return \"0\";\n     }\n     uint256 j = _i;\n     uint256 len;\n     while (j != 0) {\n         len++;\n         j /= 10;\n     }\n     bytes memory bstr = new bytes(len);\n     uint256 k = len;\n     while (_i != 0) {\n         k = k - 1;\n         uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\n         bytes1 b1 = bytes1(temp);\n         bstr[k] = b1;\n         _i /= 10;\n     }\n     return string(bstr);\n }\n}\n"
    },
    "contracts/libraries/SVG.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"./SVGUtils.sol\";\n\n/**\n * @title svg\n * @author Kames Geraghty\n * @notice SVG construction library using web-like API.\n * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\n */\nlibrary svg {\n  using Strings for uint256;\n  using Strings for uint8;\n\n  function g(string memory _props, string memory _children) internal pure returns (string memory) {\n    return el(\"g\", _props, _children);\n  }\n\n  function path(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"path\", _props, _children);\n  }\n\n  function text(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"text\", _props, _children);\n  }\n\n  function line(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"line\", _props, _children);\n  }\n\n  function circle(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"circle\", _props, _children);\n  }\n\n  function circle(string memory _props) internal pure returns (string memory) {\n    return el(\"circle\", _props);\n  }\n\n  function rect(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"rect\", _props, _children);\n  }\n\n  function rect(string memory _props) internal pure returns (string memory) {\n    return el(\"rect\", _props);\n  }\n\n  function stop(string memory _props) internal pure returns (string memory) {\n    return el(\"stop\", _props);\n  }\n\n  function filter(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"filter\", _props, _children);\n  }\n\n  function defs(string memory _children) internal pure returns (string memory) {\n    return el(\"defs\", \"\", _children);\n  }\n\n  function cdata(string memory _content) internal pure returns (string memory) {\n    return string.concat(\"<![CDATA[\", _content, \"]]>\");\n  }\n\n  /* GRADIENTS */\n  function radialGradient(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"radialGradient\", _props, _children);\n  }\n\n  function linearGradient(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"linearGradient\", _props, _children);\n  }\n\n  function gradientStop(\n    uint256 offset,\n    string memory stopColor,\n    string memory _props\n  ) internal pure returns (string memory) {\n    return\n      el(\n        \"stop\",\n        string.concat(\n          prop(\"stop-color\", stopColor),\n          \" \",\n          prop(\"offset\", string.concat(svgUtils.uint2str(offset), \"%\")),\n          \" \",\n          _props\n        )\n      );\n  }\n\n  function animateTransform(string memory _props) internal pure returns (string memory) {\n    return el(\"animateTransform\", _props);\n  }\n\n  function image(string memory _href, string memory _props) internal pure returns (string memory) {\n    return el(\"image\", string.concat(prop(\"href\", _href), \" \", _props));\n  }\n\n  function start() internal pure returns (string memory) {\n    return\n      string.concat(\n        '<svg width=\"400\" height=\"400\" style=\"background:#541563\" ',\n        'viewBox=\"0 0 400 400\" ',\n        'xmlns=\"http://www.w3.org/2000/svg\" ',\n        \">\"\n      );\n  }\n\n  function end() internal pure returns (bytes memory) {\n    return (\"</svg>\");\n  }\n\n  /* COMMON */\n  // A generic element, can be used to construct any SVG (or HTML) element\n  function el(\n    string memory _tag,\n    string memory _props,\n    string memory _children\n  ) internal pure returns (string memory) {\n    return string.concat(\"<\", _tag, \" \", _props, \">\", _children, \"</\", _tag, \">\");\n  }\n\n  // A generic element, can be used to construct any SVG (or HTML) element without children\n  function el(string memory _tag, string memory _props) internal pure returns (string memory) {\n    return string.concat(\"<\", _tag, \" \", _props, \"/>\");\n  }\n\n  // an SVG attribute\n  function prop(string memory _key, string memory _val) internal pure returns (string memory) {\n    return string.concat(_key, \"=\", '\"', _val, '\" ');\n  }\n\n  function stringifyIntSet(\n    bytes memory _data,\n    uint256 _offset,\n    uint256 _len\n  ) public pure returns (bytes memory) {\n    bytes memory res;\n    require(_data.length >= _offset + _len, \"Out of range\");\n    for (uint256 i = _offset; i < _offset + _len; i++) {\n      res = abi.encodePacked(res, byte2uint8(_data, i).toString(), \" \");\n    }\n    return res;\n  }\n\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\n    require(_data.length > _offset, \"Out of range\");\n    return uint8(_data[_offset]);\n  }\n}\n"
    },
    "contracts/ENounsTraits.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\nimport { IERC721 } from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport { IStream } from \"./interfaces/IStream.sol\";\nimport { ITraitsFetch } from \"./interfaces/ITraitsFetch.sol\";\nimport { StreamENS } from \"./streams/StreamENS.sol\";\n\n/**\n * @title ENounsTraits\n * @author Kames Geraghty\n */\ncontract ENounsTraits is ITraitsFetch, Ownable {\n  address private _streamEns;\n  address private immutable _ensToken = 0xC18360217D8F7Ab5e7c516566761Ea12Ce7F9D72;\n  address private immutable _nounsToken = 0x9C8fF314C9Bc7F6e59A9d9225Fb22946427eDC03;\n  address private immutable _lilNounsToken = 0x4b10701Bfd7BFEdc47d50562b76b436fbB5BdB3B;\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  constructor(address streamEns) {\n    _streamEns = streamEns;\n  }\n\n  function fetch(bytes memory input) external view returns (string memory) {\n    address user_ = abi.decode(input, (address));\n    uint256 ensBalance = IERC721(_ensToken).balanceOf(user_);\n    uint256 nounsBalance = IERC721(_nounsToken).balanceOf(user_);\n    uint256 lilNounsBalance = IERC721(_lilNounsToken).balanceOf(user_);\n    return\n      string.concat(\n        _getUnwrappedTraits(user_),\n        _generateTrait(\"ensBalance\", Strings.toString(ensBalance)),\n        \",\",\n        _generateTrait(\"nounsBalance\", Strings.toString(nounsBalance)),\n        \",\",\n        _generateTrait(\"lilNounsBalance\", Strings.toString(lilNounsBalance))\n      );\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n\n  function _generateTrait(string memory _key, string memory _value)\n    internal\n    pure\n    returns (string memory __traits)\n  {\n    return string.concat('{\"trait_type\":' '\"', _key, '\",', '\"value\":', '\"', _value, '\"}');\n  }\n\n  function _generateTraits(string[] memory _keys, string[] memory _values)\n    internal\n    pure\n    returns (string memory __traits)\n  {\n    string memory _traits = \"\";\n    for (uint256 i = 0; i < _keys.length; i++) {\n      if (bytes(_values[i]).length > 0) {\n        _traits = string.concat(_traits, _generateTrait(_keys[i], _values[i]), \",\");\n      }\n    }\n    return _traits;\n  }\n\n  function _getUnwrappedTraits(address user) internal view returns (string memory) {\n    (string[] memory keys_, string[] memory values_) = _getEnsTextFields(user);\n    return _generateTraits(keys_, values_);\n  }\n\n  function _getEnsTextFields(address _user)\n    internal\n    view\n    returns (string[] memory, string[] memory)\n  {\n    IStream _source = IStream(_streamEns);\n    uint256 count = _source.count(_user);\n\n    string[] memory keys_ = new string[](count);\n    string[] memory values_ = new string[](count);\n\n    (string[] memory keys__, string[] memory values__) = _source.getData(_user);\n\n    for (uint256 k = 0; k < count; k++) {\n      keys_[k] = (keys__[k]);\n      values_[k] = values__[k];\n    }\n\n    return (keys_, values_);\n  }\n}\n"
    },
    "contracts/interfaces/IStream.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface IStream {\n  function count(address _address) external view returns (uint256);\n\n  function getData(address _address)\n    external\n    view\n    returns (string[] memory keys, string[] memory values);\n\n  function getValue(address _address, string memory _key) external view returns (string memory);\n}\n"
    },
    "contracts/streams/StreamENS.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { NameEncoder } from \"../libraries/NameEncoder.sol\";\nimport { IStream } from \"../interfaces/IStream.sol\";\nimport { IReverseRegistrar } from \"../interfaces/ENS/IReverseRegistrar.sol\";\nimport { ITextResolver } from \"../interfaces/ENS/ITextResolver.sol\";\nimport { IDefaultReverseResolver } from \"../interfaces/ENS/IDefaultReverseResolver.sol\";\n\ncontract StreamENS is IStream, Ownable {\n  using NameEncoder for string;\n\n  string[] private _keys;\n  address private constant RESOLVER = 0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41;\n  address private constant REVERSE_REGISTRAR = 0x084b1c3C81545d370f3634392De611CaaBFf8148;\n  address private constant DEFAULT_REVERSE_RESOLVER = 0xA2C122BE93b0074270ebeE7f6b7292C7deB45047;\n\n  constructor() {\n    _keys.push(\"url\");\n    _keys.push(\"avatar\");\n    _keys.push(\"description\");\n    _keys.push(\"com.discord\");\n    _keys.push(\"com.github\");\n    _keys.push(\"com.twitter\");\n    _keys.push(\"eth.ens.delegate\");\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  /**\n   * @notice Get Keys\n   * @return keys string[]\n   */\n  function getKeys() external view returns (string[] memory keys) {\n    return _keys;\n  }\n\n  /**\n   * @notice Get data fields count for user\n   * @return count uint256\n   */\n  function count(address user) external view returns (uint256 count) {\n    (, bytes32 node_, ITextResolver res_) = _resolveOwner(user);\n    (string[] memory keys_, ) = _fetchNodeTextFields(_keys, node_, res_);\n    return keys_.length;\n  }\n\n  /**\n   * @notice Get all available data for user\n   * @param user address\n   * @return keys string[]\n   * @return values string[]\n   */\n  function getData(address user)\n    external\n    view\n    returns (string[] memory keys, string[] memory values)\n  {\n    (, bytes32 node_, ITextResolver res_) = _resolveOwner(user);\n    (string[] memory keys_, string[] memory values_) = _fetchNodeTextFields(_keys, node_, res_);\n    return (keys_, values_);\n  }\n\n  function getMetadata(address _address)\n    external\n    view\n    returns (\n      bytes32 node,\n      string memory name,\n      address resolver\n    )\n  {\n    (string memory name, bytes32 node, ITextResolver resolver) = _resolveOwner(_address);\n    return (node, name, address(resolver));\n  }\n\n  /**\n   * @notice Get data value for user\n   * @param user address\n   * @param key string\n   * @return value string\n   */\n  function getValue(address user, string memory key) external view returns (string memory) {\n    (, bytes32 node_, ITextResolver res_) = _resolveOwner(user);\n    return res_.text(node_, key);\n  }\n\n  /**\n   * @notice Append Key\n   * @param key string\n   */\n  function appendKey(string calldata key) external onlyOwner {\n    _keys.push(key);\n  }\n\n  /**\n   * @notice Set Key\n   * @param idx uint256\n   * @param key string\n   */\n  function updateKey(uint256 idx, string calldata key) external onlyOwner {\n    _keys[idx] = key;\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n\n  function _resolveOwner(address owner_)\n    internal\n    view\n    returns (\n      string memory,\n      bytes32,\n      ITextResolver\n    )\n  {\n    bytes32 node_ = IReverseRegistrar(REVERSE_REGISTRAR).node(owner_);\n    string memory _name = IDefaultReverseResolver(DEFAULT_REVERSE_RESOLVER).name(node_);\n    (, bytes32 _node) = _name.dnsEncodeName();\n    ITextResolver _resolver = ITextResolver(RESOLVER);\n    return (_name, _node, _resolver);\n  }\n\n  function _fetchNodeTextFields(\n    string[] memory _traits,\n    bytes32 _node,\n    ITextResolver _resolver\n  ) internal view returns (string[] memory keys_, string[] memory values_) {\n    string[] memory __keys = new string[](_traits.length);\n    string[] memory __values = new string[](_traits.length);\n    for (uint256 i = 0; i < _traits.length; i++) {\n      __keys[i] = _traits[i];\n      __values[i] = _resolver.text(_node, _traits[i]);\n    }\n    return (__keys, __values);\n  }\n}\n"
    },
    "contracts/libraries/NameEncoder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./BytesUtils.sol\";\n\nlibrary NameEncoder {\n  using BytesUtils for bytes;\n\n  function dnsEncodeName(string memory name)\n    internal\n    pure\n    returns (bytes memory dnsName, bytes32 node)\n  {\n    uint8 labelLength = 0;\n    bytes memory bytesName = bytes(name);\n    uint256 length = bytesName.length;\n    dnsName = new bytes(length + 2);\n    node = 0;\n    if (length == 0) {\n      dnsName[0] = 0;\n      return (dnsName, node);\n    }\n\n    // use unchecked to save gas since we check for an underflow\n    // and we check for the length before the loop\n    unchecked {\n      for (uint256 i = length - 1; i >= 0; i--) {\n        if (bytesName[i] == \".\") {\n          dnsName[i + 1] = bytes1(labelLength);\n          node = keccak256(abi.encodePacked(node, bytesName.keccak(i + 1, labelLength)));\n          labelLength = 0;\n        } else {\n          labelLength += 1;\n          dnsName[i + 1] = bytesName[i];\n        }\n        if (i == 0) {\n          break;\n        }\n      }\n    }\n\n    node = keccak256(abi.encodePacked(node, bytesName.keccak(0, labelLength)));\n\n    dnsName[0] = bytes1(labelLength);\n    return (dnsName, node);\n  }\n}\n"
    },
    "contracts/interfaces/ENS/IReverseRegistrar.sol": {
      "content": "pragma solidity >=0.8.4;\n\ninterface IReverseRegistrar {\n  function setDefaultResolver(address resolver) external;\n\n  function claim(address owner) external returns (bytes32);\n\n  function claimForAddr(\n    address addr,\n    address owner,\n    address resolver\n  ) external returns (bytes32);\n\n  function claimWithResolver(address owner, address resolver) external returns (bytes32);\n\n  function setName(string memory name) external returns (bytes32);\n\n  function setNameForAddr(\n    address addr,\n    address owner,\n    address resolver,\n    string memory name\n  ) external returns (bytes32);\n\n  function node(address addr) external pure returns (bytes32);\n}\n"
    },
    "contracts/interfaces/ENS/ITextResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface ITextResolver {\n  event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\n\n  /**\n   * Returns the text data associated with an ENS node and key.\n   * @param node The ENS node to query.\n   * @param key The text data key to query.\n   * @return The associated text data.\n   */\n  function text(bytes32 node, string calldata key) external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/ENS/IDefaultReverseResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IDefaultReverseResolver {\n  function name(bytes32 input) external view returns (string calldata);\n}\n"
    },
    "contracts/libraries/BytesUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nlibrary BytesUtils {\n  /*\n   * @dev Returns the keccak-256 hash of a byte range.\n   * @param self The byte string to hash.\n   * @param offset The position to start hashing at.\n   * @param len The number of bytes to hash.\n   * @return The hash of the byte range.\n   */\n  function keccak(\n    bytes memory self,\n    uint256 offset,\n    uint256 len\n  ) internal pure returns (bytes32 ret) {\n    require(offset + len <= self.length);\n    assembly {\n      ret := keccak256(add(add(self, 32), offset), len)\n    }\n  }\n\n  /**\n   * @dev Returns the ENS namehash of a DNS-encoded name.\n   * @param self The DNS-encoded name to hash.\n   * @param offset The offset at which to start hashing.\n   * @return The namehash of the name.\n   */\n  function namehash(bytes memory self, uint256 offset) internal pure returns (bytes32) {\n    (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\n    if (labelhash == bytes32(0)) {\n      require(offset == self.length - 1, \"namehash: Junk at end of name\");\n      return bytes32(0);\n    }\n    return keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\n  }\n\n  /**\n   * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\n   * @param self The byte string to read a label from.\n   * @param idx The index to read a label at.\n   * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\n   * @return newIdx The index of the start of the next label.\n   */\n  function readLabel(bytes memory self, uint256 idx)\n    internal\n    pure\n    returns (bytes32 labelhash, uint256 newIdx)\n  {\n    require(idx < self.length, \"readLabel: Index out of bounds\");\n    uint256 len = uint256(uint8(self[idx]));\n    if (len > 0) {\n      labelhash = keccak(self, idx + 1, len);\n    } else {\n      labelhash = bytes32(0);\n    }\n    newIdx = idx + len + 1;\n  }\n}\n"
    },
    "contracts/ENounsRender.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { NameEncoder } from \"./libraries/NameEncoder.sol\";\nimport { IENSReverseRecords } from \"./interfaces/IENSReverseRecords.sol\";\nimport { INounsDescriptor } from \"./interfaces/INounsDescriptor.sol\";\nimport { INounsSeeder } from \"./interfaces/INounsSeeder.sol\";\n\ncontract ENounsRender is Ownable {\n  using NameEncoder for string;\n\n  string private constant ENCODING = \"data:image/svg+xml;base64,\";\n\n  /// @notice NounsDescriptor instance\n  address private immutable _nounsDescriptor;\n\n  /// @notice ENSReverseRecords instance\n  address private immutable _ensReverseRecords;\n\n  constructor(address nounsDescriptor, address ensReverseRecords) public {\n    _nounsDescriptor = nounsDescriptor;\n    _ensReverseRecords = ensReverseRecords;\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  function render(bytes memory input) external view returns (string memory) {\n    bytes32 _seedEntropy = abi.decode(input, (bytes32));\n    return\n      string.concat(\n        ENCODING,\n        INounsDescriptor(_nounsDescriptor).generateSVGImage(_generateSeed(uint256(_seedEntropy)))\n      );\n  }\n\n  function renderUsingAddress(address user) external view returns (string memory) {\n    return\n      string.concat(\n        ENCODING,\n        INounsDescriptor(_nounsDescriptor).generateSVGImage(\n          _generateSeed(_generateInputFromAddress(user))\n        )\n      );\n  }\n\n  function renderUsingEnsName(string memory ensName) external view returns (string memory) {\n    return\n      string.concat(\n        ENCODING,\n        INounsDescriptor(_nounsDescriptor).generateSVGImage(\n          _generateSeed(_generateInputFromName(ensName))\n        )\n      );\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n\n  function _generateInputFromAddress(address _address) internal view returns (uint256) {\n    string memory toEnsName_ = _reverseName(_address);\n    return uint256(_encodeName(toEnsName_));\n  }\n\n  function _generateInputFromSeed(bytes32 _seed) internal view returns (uint256) {\n    return uint256(_seed);\n  }\n\n  function _generateInputFromName(string memory _ensName) internal pure returns (uint256) {\n    return uint256(_encodeName(_ensName));\n  }\n\n  function _encodeName(string memory _name) internal pure returns (bytes32) {\n    (, bytes32 _node) = _name.dnsEncodeName();\n    return _node;\n  }\n\n  function _reverseName(address _address) internal view returns (string memory) {\n    address[] memory t = new address[](1);\n    t[0] = _address;\n    return IENSReverseRecords(_ensReverseRecords).getNames(t)[0];\n  }\n\n  function _generateSeed(uint256 _pseudorandomness)\n    private\n    view\n    returns (INounsSeeder.Seed memory)\n  {\n    uint256 backgroundCount = INounsDescriptor(_nounsDescriptor).backgroundCount();\n    uint256 bodyCount = INounsDescriptor(_nounsDescriptor).bodyCount();\n    uint256 accessoryCount = INounsDescriptor(_nounsDescriptor).accessoryCount();\n    uint256 headCount = INounsDescriptor(_nounsDescriptor).headCount();\n    uint256 glassesCount = INounsDescriptor(_nounsDescriptor).glassesCount();\n\n    return\n      INounsSeeder.Seed({\n        background: uint48(uint48(_pseudorandomness) % backgroundCount),\n        body: uint48(uint48(_pseudorandomness >> 48) % bodyCount),\n        accessory: uint48(uint48(_pseudorandomness >> 96) % accessoryCount),\n        head: uint48(uint48(_pseudorandomness >> 144) % headCount),\n        glasses: uint48(uint48(_pseudorandomness >> 192) % glassesCount)\n      });\n  }\n\n  function generate(uint256 _tokenId, string memory _alias) public view returns (string memory) {\n    return string(\"\");\n  }\n}\n"
    },
    "contracts/interfaces/IENSReverseRecords.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.6;\n\nabstract contract IENSReverseRecords {\n    function getNames(address[] calldata addresses) external view virtual returns (string[] memory r);\n}\n"
    },
    "contracts/interfaces/INounsDescriptor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/// @title Interface for NounsDescriptor\n\n/*********************************\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n * ░░░░░░█████████░░█████████░░░ *\n * ░░░░░░██░░░████░░██░░░████░░░ *\n * ░░██████░░░████████░░░████░░░ *\n * ░░██░░██░░░████░░██░░░████░░░ *\n * ░░██░░██░░░████░░██░░░████░░░ *\n * ░░░░░░█████████░░█████████░░░ *\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n *********************************/\n\npragma solidity ^0.8.6;\n\nimport { INounsSeeder } from './INounsSeeder.sol';\n\ninterface INounsDescriptor {\n    event PartsLocked();\n\n    event DataURIToggled(bool enabled);\n\n    event BaseURIUpdated(string baseURI);\n\n    function arePartsLocked() external returns (bool);\n\n    function isDataURIEnabled() external returns (bool);\n\n    function baseURI() external returns (string memory);\n\n    function palettes(uint8 paletteIndex, uint256 colorIndex) external view returns (string memory);\n\n    function backgrounds(uint256 index) external view returns (string memory);\n\n    function bodies(uint256 index) external view returns (bytes memory);\n\n    function accessories(uint256 index) external view returns (bytes memory);\n\n    function heads(uint256 index) external view returns (bytes memory);\n\n    function glasses(uint256 index) external view returns (bytes memory);\n\n    function backgroundCount() external view returns (uint256);\n\n    function bodyCount() external view returns (uint256);\n\n    function accessoryCount() external view returns (uint256);\n\n    function headCount() external view returns (uint256);\n\n    function glassesCount() external view returns (uint256);\n\n    function addManyColorsToPalette(uint8 paletteIndex, string[] calldata newColors) external;\n\n    function addManyBackgrounds(string[] calldata backgrounds) external;\n\n    function addManyBodies(bytes[] calldata bodies) external;\n\n    function addManyAccessories(bytes[] calldata accessories) external;\n\n    function addManyHeads(bytes[] calldata heads) external;\n\n    function addManyGlasses(bytes[] calldata glasses) external;\n\n    function addColorToPalette(uint8 paletteIndex, string calldata color) external;\n\n    function addBackground(string calldata background) external;\n\n    function addBody(bytes calldata body) external;\n\n    function addAccessory(bytes calldata accessory) external;\n\n    function addHead(bytes calldata head) external;\n\n    function addGlasses(bytes calldata glasses) external;\n\n    function lockParts() external;\n\n    function toggleDataURIEnabled() external;\n\n    function setBaseURI(string calldata baseURI) external;\n\n    function tokenURI(uint256 tokenId, INounsSeeder.Seed memory seed) external view returns (string memory);\n\n    function dataURI(uint256 tokenId, INounsSeeder.Seed memory seed) external view returns (string memory);\n\n    function genericDataURI(\n        string calldata name,\n        string calldata description,\n        INounsSeeder.Seed memory seed\n    ) external view returns (string memory);\n\n    function generateSVGImage(INounsSeeder.Seed memory seed) external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/INounsSeeder.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/// @title Interface for NounsSeeder\n\n/*********************************\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n * ░░░░░░█████████░░█████████░░░ *\n * ░░░░░░██░░░████░░██░░░████░░░ *\n * ░░██████░░░████████░░░████░░░ *\n * ░░██░░██░░░████░░██░░░████░░░ *\n * ░░██░░██░░░████░░██░░░████░░░ *\n * ░░░░░░█████████░░█████████░░░ *\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n *********************************/\n\npragma solidity ^0.8.6;\n\nimport { INounsDescriptor } from './INounsDescriptor.sol';\n\ninterface INounsSeeder {\n    struct Seed {\n        uint48 background;\n        uint48 body;\n        uint48 accessory;\n        uint48 head;\n        uint48 glasses;\n    }\n\n    function generateSeed(uint256 nounId, INounsDescriptor descriptor) external view returns (Seed memory);\n}\n"
    },
    "contracts/ENouns.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport { ERC721K } from \"./ERC721K.sol\";\nimport { ERC721Storage } from \"./ERC721Storage.sol\";\nimport { ENounsRender } from \"./ENounsRender.sol\";\nimport { NameEncoder } from \"./libraries/NameEncoder.sol\";\nimport { IENSReverseRecords } from \"./interfaces/IENSReverseRecords.sol\";\n\n/**\n * @title eNouns\n * @author Kames Geraghty\n * @notice Ethereum Noun System;  one Noun for every Primary ENS Name.\n */\ncontract ENouns is ERC721K {\n  using NameEncoder for string;\n\n  /// @notice ENSReverseRecords instance\n  address private _ensReverseRecords;\n\n  /// @notice Reverse lookup of a tokenId using the owner address\n  mapping(address => uint256) private _userToTokenId;\n\n  /// @notice TokenID mapped to ENS domain node i.e. Nouns seedEntropy\n  mapping(uint256 => bytes32) internal _tokenIdToEnsNode;\n\n  /// @notice ENS node mapped to Owner address\n  mapping(bytes32 => address) internal _ensReverseRecordsMap;\n\n  event EnsReverseRecordsUpdated(address ensReverseRecords);\n\n  /**\n   * @notice ENouns Construction\n   * @param name string - Name of ERC721 token\n   * @param symbol string - Symbol of ERC721 token\n   * @param erc721Storage address - ERC721Storage instance\n   * @param ensReverseRecords address - ENSReverseRecords instance\n   */\n  constructor(\n    string memory name,\n    string memory symbol,\n    address erc721Storage,\n    address ensReverseRecords\n  ) ERC721K(name, symbol, erc721Storage) {\n    _ensReverseRecords = ensReverseRecords;\n  }\n\n  receive() external payable {\n    _checkAndIssue(_msgSender());\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  function getEnsReverseRecords() external view returns (address) {\n    return _ensReverseRecords;\n  }\n\n  function getId(address user) external view returns (uint256) {\n    return _userToTokenId[user];\n  }\n\n  function isOwner(address user) external view returns (bool) {\n    return _userToTokenId[user] > 0 ? true : false;\n  }\n\n  function preview(address user) external view returns (string memory) {\n    return ENounsRender(ERC721Storage(_erc721Storage).getSvgRender()).renderUsingAddress(user);\n  }\n\n  function previewUsingEnsName(string memory name) external view returns (string memory) {\n    return ENounsRender(ERC721Storage(_erc721Storage).getSvgRender()).renderUsingEnsName(name);\n  }\n\n  function claim() external payable {\n    _checkAndIssue(_msgSender());\n  }\n\n  function setEnsReverseRecords(address _ensReverseRecords) external onlyOwner {\n    _ensReverseRecords = _ensReverseRecords;\n    emit EnsReverseRecordsUpdated(_ensReverseRecords);\n  }\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public virtual override {\n    if (from == address(0)) {\n      _issue(to, ++_idCounter);\n    } else {\n      require(balanceOf(to) == 0, \"ENouns:current-holder\");\n      _reissue(from, to, tokenId);\n    }\n  }\n\n  function withdraw(uint256 amount) external onlyOwner {\n    (bool _success, ) = _msgSender().call{ value: amount }(\"\");\n    require(_success, \"ENouns:uh-oh\");\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n\n  function _checkAndIssue(address _sender) internal {\n    if (balanceOf(_sender) == 0) {\n      unchecked {\n        _issue(_sender, ++_idCounter); /// @dev 🤯\n      }\n    } else {\n      revert(\"ENouns:prev-issued\");\n    }\n  }\n\n  function _tokenData(uint256 tokenId)\n    internal\n    view\n    virtual\n    override\n    returns (bytes memory, bytes memory)\n  {\n    bytes memory ensNode = bytes(abi.encode(_tokenIdToEnsNode[tokenId]));\n    bytes memory ownerEncoded_ = bytes(abi.encode(ownerOf(tokenId)));\n    return (ensNode, ownerEncoded_);\n  }\n\n  function _encodeName(string memory _name) internal pure returns (bytes32) {\n    (, bytes32 _node) = _name.dnsEncodeName();\n    return _node;\n  }\n\n  function _reverseName(address _address) internal view returns (string memory) {\n    address[] memory lookup_ = new address[](1);\n    lookup_[0] = _address;\n    return IENSReverseRecords(_ensReverseRecords).getNames(lookup_)[0];\n  }\n\n  function _issue(address _to, uint256 _tokenId) internal returns (uint256) {\n    bytes32 node = _encodeName(_reverseName(_to));\n    require(node != \"\", \"ENouns:invalid-ens-node\");\n    require(_ensReverseRecordsMap[node] == address(0), \"eNouns:prev-issued\");\n    _mint(_to, _tokenId);\n    _userToTokenId[_to] = _tokenId;\n    _tokenIdToEnsNode[_tokenId] = node;\n    _ensReverseRecordsMap[node] = _to;\n    return _tokenId;\n  }\n\n  function _reissue(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  ) internal returns (uint256) {\n    require(_ensReverseRecordsMap[_encodeName(_reverseName(_to))] == _from, \"eNouns:invalid-ens\");\n    bytes32 node = _tokenIdToEnsNode[_tokenId];\n    _transfer(_from, _to, _tokenId);\n    _userToTokenId[_from] = 0;\n    _userToTokenId[_to] = _tokenId;\n    _ensReverseRecordsMap[node] = _to;\n  }\n}\n"
    },
    "contracts/ENounders/ENounders.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport { Base64 } from \"base64-sol/base64.sol\";\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { ERC721 } from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\n/**\n * @title eNounders\n * @author Kames Geraghty\n * @notice Limited Edition commemorative tokens for the Ethereum Noun System.\n */\ncontract ENounders is ERC721, Ownable {\n  string private _imageURI;\n  ContractURI internal _contractURI;\n\n  struct ContractURI {\n    string name;\n    string description;\n    string image;\n    string externalLink;\n    string sellerFeeBasisPoints;\n    string feeRecipient;\n  }\n\n  /**\n   * @notice ENounders Construction\n   * @param name string - Name of ERC721 token\n   * @param symbol string - Symbol of ERC721 token\n   * @param contractURI ContractURI - Contract URI for the token\n   * @param imageURI string - Image URI for the token\n   */\n  constructor(\n    string memory name,\n    string memory symbol,\n    ContractURI memory contractURI,\n    string memory imageURI,\n    address _owner\n  ) ERC721(name, symbol) {\n    _contractURI = contractURI;\n    _imageURI = imageURI;\n    _mint(_owner, 1);\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  function setImageURI(string memory imageURI) external {\n    _imageURI = imageURI;\n  }\n\n  function setContractURI(ContractURI memory contractURI) external {\n    _contractURI = contractURI;\n  }\n\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory uri) {\n    return\n      string(\n        abi.encodePacked(\n          \"data:application/json;base64,\",\n          Base64.encode(\n            bytes(\n              string.concat(\n                '{\"name\":',\n                '\"',\n                \"Founding eNouners - The Early Nounders\",\n                '\",',\n                '\"description\":',\n                '\"',\n                \"Limited Edition 1/1 commemorative collectable of early eNounders\",\n                '\",',\n                '\"image\":',\n                '\"',\n                _imageURI,\n                '\",',\n                '\"attributes\": [',\n                _generateTrait(\"nounish\", \"true\"),\n                \"]\",\n                \"}\"\n              )\n            )\n          )\n        )\n      );\n  }\n\n  function contractURI() external view returns (string memory uri) {\n    return\n      string(\n        abi.encodePacked(\n          \"data:application/json;base64,\",\n          Base64.encode(\n            bytes(\n              string.concat(\n                '{\"name\":',\n                '\"',\n                _contractURI.name,\n                '\",',\n                '\"description\":',\n                '\"',\n                _contractURI.description,\n                '\",',\n                '\"image\":',\n                '\"',\n                _contractURI.image,\n                '\",',\n                '\"externalLink\":',\n                '\"',\n                _contractURI.externalLink,\n                '\",',\n                '\"sellerFeeBasisPoints\":',\n                '\"',\n                _contractURI.sellerFeeBasisPoints,\n                '\",',\n                '\"feeRecipient\":',\n                '\"',\n                _contractURI.feeRecipient,\n                '\"',\n                \"}\"\n              )\n            )\n          )\n        )\n      );\n  }\n\n  function release() external onlyOwner {\n    selfdestruct(payable(msg.sender));\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n\n  function _generateTrait(string memory _key, string memory _value)\n    internal\n    pure\n    returns (string memory __traits)\n  {\n    return string.concat('{\"trait_type\":' '\"', _key, '\",', '\"value\":', '\"', _value, '\"}');\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
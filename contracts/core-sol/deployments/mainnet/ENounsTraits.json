{
  "address": "0x7F7f856cD1B2B36a4E4bFf3a1e89Df88E919F577",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamEns",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "fetch",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x117aff3da458ce9518278232c201a86dfa041bb2dfa6b20df05575929b5d7d4a",
  "receipt": {
    "to": null,
    "from": "0x761d584f1C2d43cBc3F42ECd739701a36dFFAa31",
    "contractAddress": "0x7F7f856cD1B2B36a4E4bFf3a1e89Df88E919F577",
    "transactionIndex": 70,
    "gasUsed": "883872",
    "logsBloom": "0x
    "blockHash": "0xd26f6e644a4dcc534d001986e6d505e169458cef1bc6e03b456ed6a9891549e7",
    "transactionHash": "0x117aff3da458ce9518278232c201a86dfa041bb2dfa6b20df05575929b5d7d4a",
    "logs": [
      {
        "transactionIndex": 70,
        "blockNumber": 15269278,
        "transactionHash": "0x117aff3da458ce9518278232c201a86dfa041bb2dfa6b20df05575929b5d7d4a",
        "address": "0x7F7f856cD1B2B36a4E4bFf3a1e89Df88E919F577",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000761d584f1c2d43cbc3f42ecd739701a36dffaa31"
        ],
        "data": "0x",
        "logIndex": 119,
        "blockHash": "0xd26f6e644a4dcc534d001986e6d505e169458cef1bc6e03b456ed6a9891549e7"
      }
    ],
    "blockNumber": 15269278,
    "cumulativeGasUsed": "5250278",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9b433D1eC7C0D7f637BF3460Fa416841C43Fc791"
  ],
  "numDeployments": 1,
  "solcInputHash": "9ff91e743f89171638eb63f409bd4bb1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamEns\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"fetch\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kames Geraghty\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ENounsTraits\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ENounsTraits.sol\":\"ENounsTraits\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ENounsTraits.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { IStream } from \\\"./interfaces/IStream.sol\\\";\\nimport { ITraitsFetch } from \\\"./interfaces/ITraitsFetch.sol\\\";\\nimport { StreamENS } from \\\"./streams/StreamENS.sol\\\";\\n\\n/**\\n * @title ENounsTraits\\n * @author Kames Geraghty\\n */\\ncontract ENounsTraits is ITraitsFetch, Ownable {\\n  address private _streamEns;\\n  address private immutable _ensToken = 0xC18360217D8F7Ab5e7c516566761Ea12Ce7F9D72;\\n  address private immutable _nounsToken = 0x9C8fF314C9Bc7F6e59A9d9225Fb22946427eDC03;\\n  address private immutable _lilNounsToken = 0x4b10701Bfd7BFEdc47d50562b76b436fbB5BdB3B;\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  constructor(address streamEns) {\\n    _streamEns = streamEns;\\n  }\\n\\n  function fetch(bytes memory input) external view returns (string memory) {\\n    address user_ = abi.decode(input, (address));\\n    uint256 ensBalance = IERC721(_ensToken).balanceOf(user_);\\n    uint256 nounsBalance = IERC721(_nounsToken).balanceOf(user_);\\n    uint256 lilNounsBalance = IERC721(_lilNounsToken).balanceOf(user_);\\n    return\\n      string.concat(\\n        _getUnwrappedTraits(user_),\\n        _generateTrait(\\\"ensBalance\\\", Strings.toString(ensBalance)),\\n        \\\",\\\",\\n        _generateTrait(\\\"nounsBalance\\\", Strings.toString(nounsBalance)),\\n        \\\",\\\",\\n        _generateTrait(\\\"lilNounsBalance\\\", Strings.toString(lilNounsBalance))\\n      );\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Internal Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function _generateTrait(string memory _key, string memory _value)\\n    internal\\n    pure\\n    returns (string memory __traits)\\n  {\\n    return string.concat('{\\\"trait_type\\\":' '\\\"', _key, '\\\",', '\\\"value\\\":', '\\\"', _value, '\\\"}');\\n  }\\n\\n  function _generateTraits(string[] memory _keys, string[] memory _values)\\n    internal\\n    pure\\n    returns (string memory __traits)\\n  {\\n    string memory _traits = \\\"\\\";\\n    for (uint256 i = 0; i < _keys.length; i++) {\\n      if (bytes(_values[i]).length > 0) {\\n        _traits = string.concat(_traits, _generateTrait(_keys[i], _values[i]), \\\",\\\");\\n      }\\n    }\\n    return _traits;\\n  }\\n\\n  function _getUnwrappedTraits(address user) internal view returns (string memory) {\\n    (string[] memory keys_, string[] memory values_) = _getEnsTextFields(user);\\n    return _generateTraits(keys_, values_);\\n  }\\n\\n  function _getEnsTextFields(address _user)\\n    internal\\n    view\\n    returns (string[] memory, string[] memory)\\n  {\\n    IStream _source = IStream(_streamEns);\\n    uint256 count = _source.count(_user);\\n\\n    string[] memory keys_ = new string[](count);\\n    string[] memory values_ = new string[](count);\\n\\n    (string[] memory keys__, string[] memory values__) = _source.getData(_user);\\n\\n    for (uint256 k = 0; k < count; k++) {\\n      keys_[k] = (keys__[k]);\\n      values_[k] = values__[k];\\n    }\\n\\n    return (keys_, values_);\\n  }\\n}\\n\",\"keccak256\":\"0x7275ad860abb594bebc707f5073d783ca183e271fde51f6c08d0b6a18cdad624\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ENS/IDefaultReverseResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDefaultReverseResolver {\\n  function name(bytes32 input) external view returns (string calldata);\\n}\\n\",\"keccak256\":\"0x925b12b523e5caf06f107ea15529c741bd6afaa8df5b9396783cff1aa5a4e21f\",\"license\":\"MIT\"},\"contracts/interfaces/ENS/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n  function setDefaultResolver(address resolver) external;\\n\\n  function claim(address owner) external returns (bytes32);\\n\\n  function claimForAddr(\\n    address addr,\\n    address owner,\\n    address resolver\\n  ) external returns (bytes32);\\n\\n  function claimWithResolver(address owner, address resolver) external returns (bytes32);\\n\\n  function setName(string memory name) external returns (bytes32);\\n\\n  function setNameForAddr(\\n    address addr,\\n    address owner,\\n    address resolver,\\n    string memory name\\n  ) external returns (bytes32);\\n\\n  function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x722f2ccfa92f91c005f396f84de8f54213b93d992552e69a489167c55204558b\"},\"contracts/interfaces/ENS/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n  event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\n\\n  /**\\n   * Returns the text data associated with an ENS node and key.\\n   * @param node The ENS node to query.\\n   * @param key The text data key to query.\\n   * @return The associated text data.\\n   */\\n  function text(bytes32 node, string calldata key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa99d8aa00bf995a18766905f6e4d72efdca1843fb7092e0222442379731347e5\",\"license\":\"MIT\"},\"contracts/interfaces/IStream.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IStream {\\n  function count(address _address) external view returns (uint256);\\n\\n  function getData(address _address)\\n    external\\n    view\\n    returns (string[] memory keys, string[] memory values);\\n\\n  function getValue(address _address, string memory _key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe0b5b0ba6414345934de73e26b35cbe1d69b82a0623fd52ebf81376dd3bb9b3a\",\"license\":\"MIT\"},\"contracts/interfaces/ITraitsFetch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface ITraitsFetch {\\n  function fetch(bytes memory input) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x8454d6dcf4c798032b7459026b6fa23f586b76400175a27c9b100c1aca36c5a9\",\"license\":\"MIT\"},\"contracts/libraries/BytesUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nlibrary BytesUtils {\\n  /*\\n   * @dev Returns the keccak-256 hash of a byte range.\\n   * @param self The byte string to hash.\\n   * @param offset The position to start hashing at.\\n   * @param len The number of bytes to hash.\\n   * @return The hash of the byte range.\\n   */\\n  function keccak(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(offset + len <= self.length);\\n    assembly {\\n      ret := keccak256(add(add(self, 32), offset), len)\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the ENS namehash of a DNS-encoded name.\\n   * @param self The DNS-encoded name to hash.\\n   * @param offset The offset at which to start hashing.\\n   * @return The namehash of the name.\\n   */\\n  function namehash(bytes memory self, uint256 offset) internal pure returns (bytes32) {\\n    (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\n    if (labelhash == bytes32(0)) {\\n      require(offset == self.length - 1, \\\"namehash: Junk at end of name\\\");\\n      return bytes32(0);\\n    }\\n    return keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\n  }\\n\\n  /**\\n   * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\n   * @param self The byte string to read a label from.\\n   * @param idx The index to read a label at.\\n   * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\n   * @return newIdx The index of the start of the next label.\\n   */\\n  function readLabel(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes32 labelhash, uint256 newIdx)\\n  {\\n    require(idx < self.length, \\\"readLabel: Index out of bounds\\\");\\n    uint256 len = uint256(uint8(self[idx]));\\n    if (len > 0) {\\n      labelhash = keccak(self, idx + 1, len);\\n    } else {\\n      labelhash = bytes32(0);\\n    }\\n    newIdx = idx + len + 1;\\n  }\\n}\\n\",\"keccak256\":\"0x319e6759879d5d686e11aa0b546c6fac08e2cb5e5c92b41bd852c48159f2f2b4\",\"license\":\"MIT\"},\"contracts/libraries/NameEncoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./BytesUtils.sol\\\";\\n\\nlibrary NameEncoder {\\n  using BytesUtils for bytes;\\n\\n  function dnsEncodeName(string memory name)\\n    internal\\n    pure\\n    returns (bytes memory dnsName, bytes32 node)\\n  {\\n    uint8 labelLength = 0;\\n    bytes memory bytesName = bytes(name);\\n    uint256 length = bytesName.length;\\n    dnsName = new bytes(length + 2);\\n    node = 0;\\n    if (length == 0) {\\n      dnsName[0] = 0;\\n      return (dnsName, node);\\n    }\\n\\n    // use unchecked to save gas since we check for an underflow\\n    // and we check for the length before the loop\\n    unchecked {\\n      for (uint256 i = length - 1; i >= 0; i--) {\\n        if (bytesName[i] == \\\".\\\") {\\n          dnsName[i + 1] = bytes1(labelLength);\\n          node = keccak256(abi.encodePacked(node, bytesName.keccak(i + 1, labelLength)));\\n          labelLength = 0;\\n        } else {\\n          labelLength += 1;\\n          dnsName[i + 1] = bytesName[i];\\n        }\\n        if (i == 0) {\\n          break;\\n        }\\n      }\\n    }\\n\\n    node = keccak256(abi.encodePacked(node, bytesName.keccak(0, labelLength)));\\n\\n    dnsName[0] = bytes1(labelLength);\\n    return (dnsName, node);\\n  }\\n}\\n\",\"keccak256\":\"0x3226a3f83a46c88c88218c261c9002571acd4cdce39c7acabdb59d00c91142ac\",\"license\":\"MIT\"},\"contracts/streams/StreamENS.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { NameEncoder } from \\\"../libraries/NameEncoder.sol\\\";\\nimport { IStream } from \\\"../interfaces/IStream.sol\\\";\\nimport { IReverseRegistrar } from \\\"../interfaces/ENS/IReverseRegistrar.sol\\\";\\nimport { ITextResolver } from \\\"../interfaces/ENS/ITextResolver.sol\\\";\\nimport { IDefaultReverseResolver } from \\\"../interfaces/ENS/IDefaultReverseResolver.sol\\\";\\n\\ncontract StreamENS is IStream, Ownable {\\n  using NameEncoder for string;\\n\\n  string[] private _keys;\\n  address private constant RESOLVER = 0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41;\\n  address private constant REVERSE_REGISTRAR = 0x084b1c3C81545d370f3634392De611CaaBFf8148;\\n  address private constant DEFAULT_REVERSE_RESOLVER = 0xA2C122BE93b0074270ebeE7f6b7292C7deB45047;\\n\\n  constructor() {\\n    _keys.push(\\\"url\\\");\\n    _keys.push(\\\"avatar\\\");\\n    _keys.push(\\\"description\\\");\\n    _keys.push(\\\"com.discord\\\");\\n    _keys.push(\\\"com.github\\\");\\n    _keys.push(\\\"com.twitter\\\");\\n    _keys.push(\\\"eth.ens.delegate\\\");\\n  }\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  /**\\n   * @notice Get Keys\\n   * @return keys string[]\\n   */\\n  function getKeys() external view returns (string[] memory keys) {\\n    return _keys;\\n  }\\n\\n  /**\\n   * @notice Get data fields count for user\\n   * @return count uint256\\n   */\\n  function count(address user) external view returns (uint256 count) {\\n    (, bytes32 node_, ITextResolver res_) = _resolveOwner(user);\\n    (string[] memory keys_, ) = _fetchNodeTextFields(_keys, node_, res_);\\n    return keys_.length;\\n  }\\n\\n  /**\\n   * @notice Get all available data for user\\n   * @param user address\\n   * @return keys string[]\\n   * @return values string[]\\n   */\\n  function getData(address user)\\n    external\\n    view\\n    returns (string[] memory keys, string[] memory values)\\n  {\\n    (, bytes32 node_, ITextResolver res_) = _resolveOwner(user);\\n    (string[] memory keys_, string[] memory values_) = _fetchNodeTextFields(_keys, node_, res_);\\n    return (keys_, values_);\\n  }\\n\\n  function getMetadata(address _address)\\n    external\\n    view\\n    returns (\\n      bytes32 node,\\n      string memory name,\\n      address resolver\\n    )\\n  {\\n    (string memory name, bytes32 node, ITextResolver resolver) = _resolveOwner(_address);\\n    return (node, name, address(resolver));\\n  }\\n\\n  /**\\n   * @notice Get data value for user\\n   * @param user address\\n   * @param key string\\n   * @return value string\\n   */\\n  function getValue(address user, string memory key) external view returns (string memory) {\\n    (, bytes32 node_, ITextResolver res_) = _resolveOwner(user);\\n    return res_.text(node_, key);\\n  }\\n\\n  /**\\n   * @notice Append Key\\n   * @param key string\\n   */\\n  function appendKey(string calldata key) external onlyOwner {\\n    _keys.push(key);\\n  }\\n\\n  /**\\n   * @notice Set Key\\n   * @param idx uint256\\n   * @param key string\\n   */\\n  function updateKey(uint256 idx, string calldata key) external onlyOwner {\\n    _keys[idx] = key;\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Internal Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function _resolveOwner(address owner_)\\n    internal\\n    view\\n    returns (\\n      string memory,\\n      bytes32,\\n      ITextResolver\\n    )\\n  {\\n    bytes32 node_ = IReverseRegistrar(REVERSE_REGISTRAR).node(owner_);\\n    string memory _name = IDefaultReverseResolver(DEFAULT_REVERSE_RESOLVER).name(node_);\\n    (, bytes32 _node) = _name.dnsEncodeName();\\n    ITextResolver _resolver = ITextResolver(RESOLVER);\\n    return (_name, _node, _resolver);\\n  }\\n\\n  function _fetchNodeTextFields(\\n    string[] memory _traits,\\n    bytes32 _node,\\n    ITextResolver _resolver\\n  ) internal view returns (string[] memory keys_, string[] memory values_) {\\n    string[] memory __keys = new string[](_traits.length);\\n    string[] memory __values = new string[](_traits.length);\\n    for (uint256 i = 0; i < _traits.length; i++) {\\n      __keys[i] = _traits[i];\\n      __values[i] = _resolver.text(_node, _traits[i]);\\n    }\\n    return (__keys, __values);\\n  }\\n}\\n\",\"keccak256\":\"0x9dc4dd6d3c8e07e789b3904348ccb3e9473c2b8a622b3bf844a7779db4e66fc4\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e060405273c18360217d8f7ab5e7c516566761ea12ce7f9d72608052739c8ff314c9bc7f6e59a9d9225fb22946427edc0360a052734b10701bfd7bfedc47d50562b76b436fbb5bdb3b60c05234801561005857600080fd5b50604051610f72380380610f72833981016040819052610077916100f5565b610080336100a5565b600180546001600160a01b0319166001600160a01b0392909216919091179055610125565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561010757600080fd5b81516001600160a01b038116811461011e57600080fd5b9392505050565b60805160a05160c051610e1e6101546000396000610341015260006102b1015260006102210152610e1e6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063715018a6146100515780638da5cb5b1461005b578063f2fde38b1461007b578063f6559a6b1461008e575b600080fd5b6100596100ae565b005b6000546040516001600160a01b0390911681526020015b60405180910390f35b61005961008936600461091e565b610119565b6100a161009c3660046109b1565b6101e4565b6040516100729190610a61565b6000546001600160a01b0316331461010d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b610117600061047d565b565b6000546001600160a01b031633146101735760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610104565b6001600160a01b0381166101d85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610104565b6101e18161047d565b50565b60606000828060200190518101906101fc9190610a94565b6040516370a0823160e01b81526001600160a01b0380831660048301529192506000917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028c9190610ab1565b6040516370a0823160e01b81526001600160a01b0384811660048301529192506000917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156102f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031c9190610ab1565b6040516370a0823160e01b81526001600160a01b0385811660048301529192506000917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ac9190610ab1565b90506103b7846104cd565b6103eb6040518060400160405280600a815260200169656e7342616c616e636560b01b8152506103e6866104f1565b6105f2565b61041c6040518060400160405280600c81526020016b6e6f756e7342616c616e636560a01b8152506103e6866104f1565b6104506040518060400160405280600f81526020016e6c696c4e6f756e7342616c616e636560881b8152506103e6866104f1565b6040516020016104639493929190610aca565b604051602081830303815290604052945050505050919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60606000806104db8461061e565b915091506104e9828261084e565b949350505050565b6060816000036105185750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610542578061052c81610b4f565b915061053b9050600a83610b7e565b915061051c565b60008167ffffffffffffffff81111561055d5761055d610942565b6040519080825280601f01601f191660200182016040528015610587576020820181803683370190505b5090505b84156104e95761059c600183610b92565b91506105a9600a86610ba9565b6105b4906030610bbd565b60f81b8183815181106105c9576105c9610bd5565b60200101906001600160f81b031916908160001a9053506105eb600a86610b7e565b945061058b565b60608282604051602001610607929190610beb565b604051602081830303815290604052905092915050565b6001546040516302ec2f6d60e11b81526001600160a01b038381166004830152606092839291169060009082906305d85eda90602401602060405180830381865afa158015610671573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106959190610ab1565b905060008167ffffffffffffffff8111156106b2576106b2610942565b6040519080825280602002602001820160405280156106e557816020015b60608152602001906001900390816106d05790505b50905060008267ffffffffffffffff81111561070357610703610942565b60405190808252806020026020018201604052801561073657816020015b60608152602001906001900390816107215790505b50604051631c13359160e11b81526001600160a01b0389811660048301529192506000918291908716906338266b2290602401600060405180830381865afa158015610786573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107ae9190810190610d49565b9150915060005b8581101561083e578281815181106107cf576107cf610bd5565b60200260200101518582815181106107e9576107e9610bd5565b602002602001018190525081818151811061080657610806610bd5565b602002602001015184828151811061082057610820610bd5565b6020026020010181905250808061083690610b4f565b9150506107b5565b5092989197509095505050505050565b60408051602081019091526000808252606091905b845181101561090157600084828151811061088057610880610bd5565b60200260200101515111156108ef57816108cc8683815181106108a5576108a5610bd5565b60200260200101518684815181106108bf576108bf610bd5565b60200260200101516105f2565b6040516020016108dd929190610dad565b60405160208183030381529060405291505b806108f981610b4f565b915050610863565b509392505050565b6001600160a01b03811681146101e157600080fd5b60006020828403121561093057600080fd5b813561093b81610909565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561098157610981610942565b604052919050565b600067ffffffffffffffff8211156109a3576109a3610942565b50601f01601f191660200190565b6000602082840312156109c357600080fd5b813567ffffffffffffffff8111156109da57600080fd5b8201601f810184136109eb57600080fd5b80356109fe6109f982610989565b610958565b818152856020838501011115610a1357600080fd5b81602084016020830137600091810160200191909152949350505050565b60005b83811015610a4c578181015183820152602001610a34565b83811115610a5b576000848401525b50505050565b6020815260008251806020840152610a80816040850160208701610a31565b601f01601f19169190910160400192915050565b600060208284031215610aa657600080fd5b815161093b81610909565b600060208284031215610ac357600080fd5b5051919050565b60008551610adc818460208a01610a31565b855190830190610af0818360208a01610a31565b600b60fa1b91018181528551909190610b10816001850160208a01610a31565b60019201918201528351610b2b816002840160208801610a31565b016002019695505050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201610b6157610b61610b39565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610b8d57610b8d610b68565b500490565b600082821015610ba457610ba4610b39565b500390565b600082610bb857610bb8610b68565b500690565b60008219821115610bd057610bd0610b39565b500190565b634e487b7160e01b600052603260045260246000fd5b6e3d913a3930b4ba2fba3cb832911d1160891b81528251600090610c1681600f850160208801610a31565b61088b60f21b600f9184019182015267113b30b63ab2911d60c11b6011820152601160f91b60198201528351610c5381601a840160208801610a31565b61227d60f01b601a9290910191820152601c01949350505050565b600082601f830112610c7f57600080fd5b8151602067ffffffffffffffff80831115610c9c57610c9c610942565b8260051b610cab838201610958565b9384528581018301938381019088861115610cc557600080fd5b84880192505b85831015610d3d57825184811115610ce35760008081fd5b8801603f81018a13610cf55760008081fd5b858101516040610d076109f983610989565b8281528c82848601011115610d1c5760008081fd5b610d2b838a8301848701610a31565b85525050509184019190840190610ccb565b98975050505050505050565b60008060408385031215610d5c57600080fd5b825167ffffffffffffffff80821115610d7457600080fd5b610d8086838701610c6e565b93506020850151915080821115610d9657600080fd5b50610da385828601610c6e565b9150509250929050565b60008351610dbf818460208801610a31565b835190830190610dd3818360208801610a31565b600b60fa1b910190815260010194935050505056fea264697066735822122066a912a7e33a4343b4f0102ff9e0a23ae2967ef92b9e45235a65c3c9cf5e9b9664736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063715018a6146100515780638da5cb5b1461005b578063f2fde38b1461007b578063f6559a6b1461008e575b600080fd5b6100596100ae565b005b6000546040516001600160a01b0390911681526020015b60405180910390f35b61005961008936600461091e565b610119565b6100a161009c3660046109b1565b6101e4565b6040516100729190610a61565b6000546001600160a01b0316331461010d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b610117600061047d565b565b6000546001600160a01b031633146101735760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610104565b6001600160a01b0381166101d85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610104565b6101e18161047d565b50565b60606000828060200190518101906101fc9190610a94565b6040516370a0823160e01b81526001600160a01b0380831660048301529192506000917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028c9190610ab1565b6040516370a0823160e01b81526001600160a01b0384811660048301529192506000917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156102f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031c9190610ab1565b6040516370a0823160e01b81526001600160a01b0385811660048301529192506000917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ac9190610ab1565b90506103b7846104cd565b6103eb6040518060400160405280600a815260200169656e7342616c616e636560b01b8152506103e6866104f1565b6105f2565b61041c6040518060400160405280600c81526020016b6e6f756e7342616c616e636560a01b8152506103e6866104f1565b6104506040518060400160405280600f81526020016e6c696c4e6f756e7342616c616e636560881b8152506103e6866104f1565b6040516020016104639493929190610aca565b604051602081830303815290604052945050505050919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60606000806104db8461061e565b915091506104e9828261084e565b949350505050565b6060816000036105185750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610542578061052c81610b4f565b915061053b9050600a83610b7e565b915061051c565b60008167ffffffffffffffff81111561055d5761055d610942565b6040519080825280601f01601f191660200182016040528015610587576020820181803683370190505b5090505b84156104e95761059c600183610b92565b91506105a9600a86610ba9565b6105b4906030610bbd565b60f81b8183815181106105c9576105c9610bd5565b60200101906001600160f81b031916908160001a9053506105eb600a86610b7e565b945061058b565b60608282604051602001610607929190610beb565b604051602081830303815290604052905092915050565b6001546040516302ec2f6d60e11b81526001600160a01b038381166004830152606092839291169060009082906305d85eda90602401602060405180830381865afa158015610671573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106959190610ab1565b905060008167ffffffffffffffff8111156106b2576106b2610942565b6040519080825280602002602001820160405280156106e557816020015b60608152602001906001900390816106d05790505b50905060008267ffffffffffffffff81111561070357610703610942565b60405190808252806020026020018201604052801561073657816020015b60608152602001906001900390816107215790505b50604051631c13359160e11b81526001600160a01b0389811660048301529192506000918291908716906338266b2290602401600060405180830381865afa158015610786573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107ae9190810190610d49565b9150915060005b8581101561083e578281815181106107cf576107cf610bd5565b60200260200101518582815181106107e9576107e9610bd5565b602002602001018190525081818151811061080657610806610bd5565b602002602001015184828151811061082057610820610bd5565b6020026020010181905250808061083690610b4f565b9150506107b5565b5092989197509095505050505050565b60408051602081019091526000808252606091905b845181101561090157600084828151811061088057610880610bd5565b60200260200101515111156108ef57816108cc8683815181106108a5576108a5610bd5565b60200260200101518684815181106108bf576108bf610bd5565b60200260200101516105f2565b6040516020016108dd929190610dad565b60405160208183030381529060405291505b806108f981610b4f565b915050610863565b509392505050565b6001600160a01b03811681146101e157600080fd5b60006020828403121561093057600080fd5b813561093b81610909565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561098157610981610942565b604052919050565b600067ffffffffffffffff8211156109a3576109a3610942565b50601f01601f191660200190565b6000602082840312156109c357600080fd5b813567ffffffffffffffff8111156109da57600080fd5b8201601f810184136109eb57600080fd5b80356109fe6109f982610989565b610958565b818152856020838501011115610a1357600080fd5b81602084016020830137600091810160200191909152949350505050565b60005b83811015610a4c578181015183820152602001610a34565b83811115610a5b576000848401525b50505050565b6020815260008251806020840152610a80816040850160208701610a31565b601f01601f19169190910160400192915050565b600060208284031215610aa657600080fd5b815161093b81610909565b600060208284031215610ac357600080fd5b5051919050565b60008551610adc818460208a01610a31565b855190830190610af0818360208a01610a31565b600b60fa1b91018181528551909190610b10816001850160208a01610a31565b60019201918201528351610b2b816002840160208801610a31565b016002019695505050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201610b6157610b61610b39565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610b8d57610b8d610b68565b500490565b600082821015610ba457610ba4610b39565b500390565b600082610bb857610bb8610b68565b500690565b60008219821115610bd057610bd0610b39565b500190565b634e487b7160e01b600052603260045260246000fd5b6e3d913a3930b4ba2fba3cb832911d1160891b81528251600090610c1681600f850160208801610a31565b61088b60f21b600f9184019182015267113b30b63ab2911d60c11b6011820152601160f91b60198201528351610c5381601a840160208801610a31565b61227d60f01b601a9290910191820152601c01949350505050565b600082601f830112610c7f57600080fd5b8151602067ffffffffffffffff80831115610c9c57610c9c610942565b8260051b610cab838201610958565b9384528581018301938381019088861115610cc557600080fd5b84880192505b85831015610d3d57825184811115610ce35760008081fd5b8801603f81018a13610cf55760008081fd5b858101516040610d076109f983610989565b8281528c82848601011115610d1c5760008081fd5b610d2b838a8301848701610a31565b85525050509184019190840190610ccb565b98975050505050505050565b60008060408385031215610d5c57600080fd5b825167ffffffffffffffff80821115610d7457600080fd5b610d8086838701610c6e565b93506020850151915080821115610d9657600080fd5b50610da385828601610c6e565b9150509250929050565b60008351610dbf818460208801610a31565b835190830190610dd3818360208801610a31565b600b60fa1b910190815260010194935050505056fea264697066735822122066a912a7e33a4343b4f0102ff9e0a23ae2967ef92b9e45235a65c3c9cf5e9b9664736f6c634300080f0033",
  "devdoc": {
    "author": "Kames Geraghty",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ENounsTraits",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ENounsTraits.sol:ENounsTraits",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2680,
        "contract": "contracts/ENounsTraits.sol:ENounsTraits",
        "label": "_streamEns",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}
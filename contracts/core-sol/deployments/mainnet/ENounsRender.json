{
  "address": "0xd597CbDCc7ab73B9a8B0c1627f435e19Fd302d93",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nounsDescriptor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ensReverseRecords",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_alias",
          "type": "string"
        }
      ],
      "name": "generate",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "render",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "renderUsingAddress",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ensName",
          "type": "string"
        }
      ],
      "name": "renderUsingEnsName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8ba36a1963ecabe8776095440a279115c685e669d33f3566e04b2d3159cca185",
  "receipt": {
    "to": null,
    "from": "0x761d584f1C2d43cBc3F42ECd739701a36dFFAa31",
    "contractAddress": "0xd597CbDCc7ab73B9a8B0c1627f435e19Fd302d93",
    "transactionIndex": 274,
    "gasUsed": "1011633",
    "logsBloom": "0x00000000000020000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000080000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000020000000000000",
    "blockHash": "0x7609667a9a606185fa7b0fb19f25da6df6864936130e9b0e9eeb4be81e1c9880",
    "transactionHash": "0x8ba36a1963ecabe8776095440a279115c685e669d33f3566e04b2d3159cca185",
    "logs": [
      {
        "transactionIndex": 274,
        "blockNumber": 15269273,
        "transactionHash": "0x8ba36a1963ecabe8776095440a279115c685e669d33f3566e04b2d3159cca185",
        "address": "0xd597CbDCc7ab73B9a8B0c1627f435e19Fd302d93",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000761d584f1c2d43cbc3f42ecd739701a36dffaa31"
        ],
        "data": "0x",
        "logIndex": 398,
        "blockHash": "0x7609667a9a606185fa7b0fb19f25da6df6864936130e9b0e9eeb4be81e1c9880"
      }
    ],
    "blockNumber": 15269273,
    "cumulativeGasUsed": "26688706",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0Cfdb3Ba1694c2bb2CFACB0339ad7b1Ae5932B63",
    "0x3671aE578E63FdF66ad4F3E12CC0c0d71Ac7510C"
  ],
  "numDeployments": 1,
  "solcInputHash": "9ff91e743f89171638eb63f409bd4bb1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nounsDescriptor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ensReverseRecords\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_alias\",\"type\":\"string\"}],\"name\":\"generate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"render\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"renderUsingAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"}],\"name\":\"renderUsingEnsName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ENounsRender.sol\":\"ENounsRender\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ENounsRender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { NameEncoder } from \\\"./libraries/NameEncoder.sol\\\";\\nimport { IENSReverseRecords } from \\\"./interfaces/IENSReverseRecords.sol\\\";\\nimport { INounsDescriptor } from \\\"./interfaces/INounsDescriptor.sol\\\";\\nimport { INounsSeeder } from \\\"./interfaces/INounsSeeder.sol\\\";\\n\\ncontract ENounsRender is Ownable {\\n  using NameEncoder for string;\\n\\n  string private constant ENCODING = \\\"data:image/svg+xml;base64,\\\";\\n\\n  /// @notice NounsDescriptor instance\\n  address private immutable _nounsDescriptor;\\n\\n  /// @notice ENSReverseRecords instance\\n  address private immutable _ensReverseRecords;\\n\\n  constructor(address nounsDescriptor, address ensReverseRecords) public {\\n    _nounsDescriptor = nounsDescriptor;\\n    _ensReverseRecords = ensReverseRecords;\\n  }\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function render(bytes memory input) external view returns (string memory) {\\n    bytes32 _seedEntropy = abi.decode(input, (bytes32));\\n    return\\n      string.concat(\\n        ENCODING,\\n        INounsDescriptor(_nounsDescriptor).generateSVGImage(_generateSeed(uint256(_seedEntropy)))\\n      );\\n  }\\n\\n  function renderUsingAddress(address user) external view returns (string memory) {\\n    return\\n      string.concat(\\n        ENCODING,\\n        INounsDescriptor(_nounsDescriptor).generateSVGImage(\\n          _generateSeed(_generateInputFromAddress(user))\\n        )\\n      );\\n  }\\n\\n  function renderUsingEnsName(string memory ensName) external view returns (string memory) {\\n    return\\n      string.concat(\\n        ENCODING,\\n        INounsDescriptor(_nounsDescriptor).generateSVGImage(\\n          _generateSeed(_generateInputFromName(ensName))\\n        )\\n      );\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Internal Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function _generateInputFromAddress(address _address) internal view returns (uint256) {\\n    string memory toEnsName_ = _reverseName(_address);\\n    return uint256(_encodeName(toEnsName_));\\n  }\\n\\n  function _generateInputFromSeed(bytes32 _seed) internal view returns (uint256) {\\n    return uint256(_seed);\\n  }\\n\\n  function _generateInputFromName(string memory _ensName) internal pure returns (uint256) {\\n    return uint256(_encodeName(_ensName));\\n  }\\n\\n  function _encodeName(string memory _name) internal pure returns (bytes32) {\\n    (, bytes32 _node) = _name.dnsEncodeName();\\n    return _node;\\n  }\\n\\n  function _reverseName(address _address) internal view returns (string memory) {\\n    address[] memory t = new address[](1);\\n    t[0] = _address;\\n    return IENSReverseRecords(_ensReverseRecords).getNames(t)[0];\\n  }\\n\\n  function _generateSeed(uint256 _pseudorandomness)\\n    private\\n    view\\n    returns (INounsSeeder.Seed memory)\\n  {\\n    uint256 backgroundCount = INounsDescriptor(_nounsDescriptor).backgroundCount();\\n    uint256 bodyCount = INounsDescriptor(_nounsDescriptor).bodyCount();\\n    uint256 accessoryCount = INounsDescriptor(_nounsDescriptor).accessoryCount();\\n    uint256 headCount = INounsDescriptor(_nounsDescriptor).headCount();\\n    uint256 glassesCount = INounsDescriptor(_nounsDescriptor).glassesCount();\\n\\n    return\\n      INounsSeeder.Seed({\\n        background: uint48(uint48(_pseudorandomness) % backgroundCount),\\n        body: uint48(uint48(_pseudorandomness >> 48) % bodyCount),\\n        accessory: uint48(uint48(_pseudorandomness >> 96) % accessoryCount),\\n        head: uint48(uint48(_pseudorandomness >> 144) % headCount),\\n        glasses: uint48(uint48(_pseudorandomness >> 192) % glassesCount)\\n      });\\n  }\\n\\n  function generate(uint256 _tokenId, string memory _alias) public view returns (string memory) {\\n    return string(\\\"\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x6aa89a0ddca97a701899e1a70e30b4e5b4a188a42d0d2d399f89f87c222a58f7\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IENSReverseRecords.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.6;\\n\\nabstract contract IENSReverseRecords {\\n    function getNames(address[] calldata addresses) external view virtual returns (string[] memory r);\\n}\\n\",\"keccak256\":\"0x246924a3f9ee9048634212061d63adf1a9fbd0f153f874c6fd8bd988650e9e55\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/INounsDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for NounsDescriptor\\n\\n/*********************************\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n *********************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport { INounsSeeder } from './INounsSeeder.sol';\\n\\ninterface INounsDescriptor {\\n    event PartsLocked();\\n\\n    event DataURIToggled(bool enabled);\\n\\n    event BaseURIUpdated(string baseURI);\\n\\n    function arePartsLocked() external returns (bool);\\n\\n    function isDataURIEnabled() external returns (bool);\\n\\n    function baseURI() external returns (string memory);\\n\\n    function palettes(uint8 paletteIndex, uint256 colorIndex) external view returns (string memory);\\n\\n    function backgrounds(uint256 index) external view returns (string memory);\\n\\n    function bodies(uint256 index) external view returns (bytes memory);\\n\\n    function accessories(uint256 index) external view returns (bytes memory);\\n\\n    function heads(uint256 index) external view returns (bytes memory);\\n\\n    function glasses(uint256 index) external view returns (bytes memory);\\n\\n    function backgroundCount() external view returns (uint256);\\n\\n    function bodyCount() external view returns (uint256);\\n\\n    function accessoryCount() external view returns (uint256);\\n\\n    function headCount() external view returns (uint256);\\n\\n    function glassesCount() external view returns (uint256);\\n\\n    function addManyColorsToPalette(uint8 paletteIndex, string[] calldata newColors) external;\\n\\n    function addManyBackgrounds(string[] calldata backgrounds) external;\\n\\n    function addManyBodies(bytes[] calldata bodies) external;\\n\\n    function addManyAccessories(bytes[] calldata accessories) external;\\n\\n    function addManyHeads(bytes[] calldata heads) external;\\n\\n    function addManyGlasses(bytes[] calldata glasses) external;\\n\\n    function addColorToPalette(uint8 paletteIndex, string calldata color) external;\\n\\n    function addBackground(string calldata background) external;\\n\\n    function addBody(bytes calldata body) external;\\n\\n    function addAccessory(bytes calldata accessory) external;\\n\\n    function addHead(bytes calldata head) external;\\n\\n    function addGlasses(bytes calldata glasses) external;\\n\\n    function lockParts() external;\\n\\n    function toggleDataURIEnabled() external;\\n\\n    function setBaseURI(string calldata baseURI) external;\\n\\n    function tokenURI(uint256 tokenId, INounsSeeder.Seed memory seed) external view returns (string memory);\\n\\n    function dataURI(uint256 tokenId, INounsSeeder.Seed memory seed) external view returns (string memory);\\n\\n    function genericDataURI(\\n        string calldata name,\\n        string calldata description,\\n        INounsSeeder.Seed memory seed\\n    ) external view returns (string memory);\\n\\n    function generateSVGImage(INounsSeeder.Seed memory seed) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x87bac5321fd5d5cc8c7b4e83cebb68b28ec8ccea25890441f24f21e5349798ef\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/INounsSeeder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for NounsSeeder\\n\\n/*********************************\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n *********************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport { INounsDescriptor } from './INounsDescriptor.sol';\\n\\ninterface INounsSeeder {\\n    struct Seed {\\n        uint48 background;\\n        uint48 body;\\n        uint48 accessory;\\n        uint48 head;\\n        uint48 glasses;\\n    }\\n\\n    function generateSeed(uint256 nounId, INounsDescriptor descriptor) external view returns (Seed memory);\\n}\\n\",\"keccak256\":\"0x1d4912076a8f3c7f01eefe415161590c32efe1a32eb1211a09da6808191c23db\",\"license\":\"GPL-3.0\"},\"contracts/libraries/BytesUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nlibrary BytesUtils {\\n  /*\\n   * @dev Returns the keccak-256 hash of a byte range.\\n   * @param self The byte string to hash.\\n   * @param offset The position to start hashing at.\\n   * @param len The number of bytes to hash.\\n   * @return The hash of the byte range.\\n   */\\n  function keccak(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(offset + len <= self.length);\\n    assembly {\\n      ret := keccak256(add(add(self, 32), offset), len)\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the ENS namehash of a DNS-encoded name.\\n   * @param self The DNS-encoded name to hash.\\n   * @param offset The offset at which to start hashing.\\n   * @return The namehash of the name.\\n   */\\n  function namehash(bytes memory self, uint256 offset) internal pure returns (bytes32) {\\n    (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\n    if (labelhash == bytes32(0)) {\\n      require(offset == self.length - 1, \\\"namehash: Junk at end of name\\\");\\n      return bytes32(0);\\n    }\\n    return keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\n  }\\n\\n  /**\\n   * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\n   * @param self The byte string to read a label from.\\n   * @param idx The index to read a label at.\\n   * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\n   * @return newIdx The index of the start of the next label.\\n   */\\n  function readLabel(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes32 labelhash, uint256 newIdx)\\n  {\\n    require(idx < self.length, \\\"readLabel: Index out of bounds\\\");\\n    uint256 len = uint256(uint8(self[idx]));\\n    if (len > 0) {\\n      labelhash = keccak(self, idx + 1, len);\\n    } else {\\n      labelhash = bytes32(0);\\n    }\\n    newIdx = idx + len + 1;\\n  }\\n}\\n\",\"keccak256\":\"0x319e6759879d5d686e11aa0b546c6fac08e2cb5e5c92b41bd852c48159f2f2b4\",\"license\":\"MIT\"},\"contracts/libraries/NameEncoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./BytesUtils.sol\\\";\\n\\nlibrary NameEncoder {\\n  using BytesUtils for bytes;\\n\\n  function dnsEncodeName(string memory name)\\n    internal\\n    pure\\n    returns (bytes memory dnsName, bytes32 node)\\n  {\\n    uint8 labelLength = 0;\\n    bytes memory bytesName = bytes(name);\\n    uint256 length = bytesName.length;\\n    dnsName = new bytes(length + 2);\\n    node = 0;\\n    if (length == 0) {\\n      dnsName[0] = 0;\\n      return (dnsName, node);\\n    }\\n\\n    // use unchecked to save gas since we check for an underflow\\n    // and we check for the length before the loop\\n    unchecked {\\n      for (uint256 i = length - 1; i >= 0; i--) {\\n        if (bytesName[i] == \\\".\\\") {\\n          dnsName[i + 1] = bytes1(labelLength);\\n          node = keccak256(abi.encodePacked(node, bytesName.keccak(i + 1, labelLength)));\\n          labelLength = 0;\\n        } else {\\n          labelLength += 1;\\n          dnsName[i + 1] = bytesName[i];\\n        }\\n        if (i == 0) {\\n          break;\\n        }\\n      }\\n    }\\n\\n    node = keccak256(abi.encodePacked(node, bytesName.keccak(0, labelLength)));\\n\\n    dnsName[0] = bytes1(labelLength);\\n    return (dnsName, node);\\n  }\\n}\\n\",\"keccak256\":\"0x3226a3f83a46c88c88218c261c9002571acd4cdce39c7acabdb59d00c91142ac\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ENounsRender.sol:ENounsRender",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}
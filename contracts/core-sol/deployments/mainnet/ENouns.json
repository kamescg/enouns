{
  "address": "0x5879eb56dcff53095781aa1f4b5eb0d325960360",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "erc721Storage",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ensReverseRecords",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc721Storage",
          "type": "address"
        }
      ],
      "name": "ERC721StorageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ensReverseRecords",
          "type": "address"
        }
      ],
      "name": "EnsReverseRecordsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getERC721Storage",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEnsReverseRecords",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "preview",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "previewUsingEnsName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ensReverseRecords",
          "type": "address"
        }
      ],
      "name": "setEnsReverseRecords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc721Storage",
          "type": "address"
        }
      ],
      "name": "setStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcbdbc1f60f1c8777fc16f88696a6ccef5b3ee242d316254e668da8138a75a909",
  "receipt": {
    "to": null,
    "from": "0x761d584f1c2d43cbc3f42ecd739701a36dffaa31",
    "contractAddress": "0x5879eb56dcff53095781aa1f4b5eb0d325960360",
    "transactionIndex": "0xe5",
    "gasUsed": "0x2010da",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000840000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000001000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000020000000000000",
    "blockHash": "0xdfa3f23f72c973a5515dd29ddffe98de475f68863cd54daa75fbfa19e8d5e097",
    "transactionHash": "0x2d22fcf321799b6694a67ba94c7a0e9a7305d7225903a2e780e83f300ae921dc",
    "logs": [
      {
        "address": "0x5879eb56dcff53095781aa1f4b5eb0d325960360",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000761d584f1c2d43cbc3f42ecd739701a36dffaa31"
        ],
        "data": "0x",
        "blockNumber": "0xe900a5",
        "transactionHash": "0x2d22fcf321799b6694a67ba94c7a0e9a7305d7225903a2e780e83f300ae921dc",
        "transactionIndex": "0xe5",
        "blockHash": "0xdfa3f23f72c973a5515dd29ddffe98de475f68863cd54daa75fbfa19e8d5e097",
        "logIndex": "0x1a2",
        "removed": false
      }
    ],
    "blockNumber": "0xe900a5",
    "cumulativeGasUsed": "0x1336754",
    "status": "0x1"
  },
  "args": [
    "Ethereum Nouns System",
    "eNouns",
    "0x0A3895005C766DBF9c3aef8c953a156F4a0A0988",
    "0x3671aE578E63FdF66ad4F3E12CC0c0d71Ac7510C"
  ],
  "numDeployments": 2,
  "solcInputHash": "cde2d96bc0aa20383f5e601d5edfa2b9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"erc721Storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ensReverseRecords\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc721Storage\",\"type\":\"address\"}],\"name\":\"ERC721StorageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ensReverseRecords\",\"type\":\"address\"}],\"name\":\"EnsReverseRecordsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getERC721Storage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEnsReverseRecords\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"preview\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"previewUsingEnsName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ensReverseRecords\",\"type\":\"address\"}],\"name\":\"setEnsReverseRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Storage\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Kames Geraghty\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"params\":{\"ensReverseRecords\":\"address - ENSReverseRecords instance\",\"erc721Storage\":\"address - ERC721Storage instance\",\"name\":\"string - Name of ERC721 token\",\"symbol\":\"string - Symbol of ERC721 token\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"eNouns\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"ENouns Construction\"}},\"notice\":\"Ethereum Noun System;  one Noun for every Primary ENS Name.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ENouns.sol\":\"ENouns\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/ENouns.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport { ERC721K } from \\\"./ERC721K.sol\\\";\\nimport { ERC721Storage } from \\\"./ERC721Storage.sol\\\";\\nimport { ENounsRender } from \\\"./ENounsRender.sol\\\";\\nimport { NameEncoder } from \\\"./libraries/NameEncoder.sol\\\";\\nimport { IENSReverseRecords } from \\\"./interfaces/IENSReverseRecords.sol\\\";\\n\\n/**\\n * @title eNouns\\n * @author Kames Geraghty\\n * @notice Ethereum Noun System;  one Noun for every Primary ENS Name.\\n */\\ncontract ENouns is ERC721K {\\n  using NameEncoder for string;\\n\\n  /// @notice ENSReverseRecords instance\\n  address private _ensReverseRecords;\\n\\n  /// @notice Reverse lookup of a tokenId using the owner address\\n  mapping(address => uint256) private _userToTokenId;\\n\\n  /// @notice TokenID mapped to ENS domain node i.e. Nouns seedEntropy\\n  mapping(uint256 => bytes32) internal _tokenIdToEnsNode;\\n\\n  /// @notice ENS node mapped to Owner address\\n  mapping(bytes32 => address) internal _ensReverseRecordsMap;\\n\\n  event EnsReverseRecordsUpdated(address ensReverseRecords);\\n\\n  /**\\n   * @notice ENouns Construction\\n   * @param name string - Name of ERC721 token\\n   * @param symbol string - Symbol of ERC721 token\\n   * @param erc721Storage address - ERC721Storage instance\\n   * @param ensReverseRecords address - ENSReverseRecords instance\\n   */\\n  constructor(\\n    string memory name,\\n    string memory symbol,\\n    address erc721Storage,\\n    address ensReverseRecords\\n  ) ERC721K(name, symbol, erc721Storage) {\\n    _ensReverseRecords = ensReverseRecords;\\n  }\\n\\n  receive() external payable {\\n    _checkAndIssue(_msgSender());\\n  }\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function getEnsReverseRecords() external view returns (address) {\\n    return _ensReverseRecords;\\n  }\\n\\n  function getId(address user) external view returns (uint256) {\\n    return _userToTokenId[user];\\n  }\\n\\n  function isOwner(address user) external view returns (bool) {\\n    return _userToTokenId[user] > 0 ? true : false;\\n  }\\n\\n  function preview(address user) external view returns (string memory) {\\n    return ENounsRender(ERC721Storage(_erc721Storage).getSvgRender()).renderUsingAddress(user);\\n  }\\n\\n  function previewUsingEnsName(string memory name) external view returns (string memory) {\\n    return ENounsRender(ERC721Storage(_erc721Storage).getSvgRender()).renderUsingEnsName(name);\\n  }\\n\\n  function claim() external payable {\\n    _checkAndIssue(_msgSender());\\n  }\\n\\n  function setEnsReverseRecords(address _ensReverseRecords) external onlyOwner {\\n    _ensReverseRecords = _ensReverseRecords;\\n    emit EnsReverseRecordsUpdated(_ensReverseRecords);\\n  }\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override {\\n    if (from == address(0)) {\\n      _issue(to, ++_idCounter);\\n    } else {\\n      require(balanceOf(to) == 0, \\\"ENouns:current-holder\\\");\\n      _reissue(from, to, tokenId);\\n    }\\n  }\\n\\n  function withdraw(uint256 amount) external onlyOwner {\\n    (bool _success, ) = _msgSender().call{ value: amount }(\\\"\\\");\\n    require(_success, \\\"ENouns:uh-oh\\\");\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Internal Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function _checkAndIssue(address _sender) internal {\\n    if (balanceOf(_sender) == 0) {\\n      unchecked {\\n        _issue(_sender, ++_idCounter); /// @dev \\ud83e\\udd2f\\n      }\\n    } else {\\n      revert(\\\"ENouns:prev-issued\\\");\\n    }\\n  }\\n\\n  function _tokenData(uint256 tokenId)\\n    internal\\n    view\\n    virtual\\n    override\\n    returns (bytes memory, bytes memory)\\n  {\\n    bytes memory ensNode = bytes(abi.encode(_tokenIdToEnsNode[tokenId]));\\n    bytes memory ownerEncoded_ = bytes(abi.encode(ownerOf(tokenId)));\\n    return (ensNode, ownerEncoded_);\\n  }\\n\\n  function _encodeName(string memory _name) internal pure returns (bytes32) {\\n    (, bytes32 _node) = _name.dnsEncodeName();\\n    return _node;\\n  }\\n\\n  function _reverseName(address _address) internal view returns (string memory) {\\n    address[] memory lookup_ = new address[](1);\\n    lookup_[0] = _address;\\n    return IENSReverseRecords(_ensReverseRecords).getNames(lookup_)[0];\\n  }\\n\\n  function _issue(address _to, uint256 _tokenId) internal returns (uint256) {\\n    bytes32 node = _encodeName(_reverseName(_to));\\n    require(node != \\\"\\\", \\\"ENouns:invalid-ens-node\\\");\\n    require(_ensReverseRecordsMap[node] == address(0), \\\"eNouns:prev-issued\\\");\\n    _mint(_to, _tokenId);\\n    _userToTokenId[_to] = _tokenId;\\n    _tokenIdToEnsNode[_tokenId] = node;\\n    _ensReverseRecordsMap[node] = _to;\\n    return _tokenId;\\n  }\\n\\n  function _reissue(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId\\n  ) internal returns (uint256) {\\n    require(_ensReverseRecordsMap[_encodeName(_reverseName(_to))] == _from, \\\"eNouns:invalid-ens\\\");\\n    bytes32 node = _tokenIdToEnsNode[_tokenId];\\n    _transfer(_from, _to, _tokenId);\\n    _userToTokenId[_from] = 0;\\n    _userToTokenId[_to] = _tokenId;\\n    _ensReverseRecordsMap[node] = _to;\\n  }\\n}\\n\",\"keccak256\":\"0xc9ddde958600e1803e565c870059fc9132d2e1d199a398a7e9b4550f3da6fc62\",\"license\":\"GPL-3.0\"},\"contracts/ENounsRender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { NameEncoder } from \\\"./libraries/NameEncoder.sol\\\";\\nimport { IENSReverseRecords } from \\\"./interfaces/IENSReverseRecords.sol\\\";\\nimport { INounsDescriptor } from \\\"./interfaces/INounsDescriptor.sol\\\";\\nimport { INounsSeeder } from \\\"./interfaces/INounsSeeder.sol\\\";\\n\\ncontract ENounsRender is Ownable {\\n  using NameEncoder for string;\\n\\n  string private constant ENCODING = \\\"data:image/svg+xml;base64,\\\";\\n\\n  /// @notice NounsDescriptor instance\\n  address private immutable _nounsDescriptor;\\n\\n  /// @notice ENSReverseRecords instance\\n  address private immutable _ensReverseRecords;\\n\\n  constructor(address nounsDescriptor, address ensReverseRecords) public {\\n    _nounsDescriptor = nounsDescriptor;\\n    _ensReverseRecords = ensReverseRecords;\\n  }\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function render(bytes memory input) external view returns (string memory) {\\n    bytes32 _seedEntropy = abi.decode(input, (bytes32));\\n    return\\n      string.concat(\\n        ENCODING,\\n        INounsDescriptor(_nounsDescriptor).generateSVGImage(_generateSeed(uint256(_seedEntropy)))\\n      );\\n  }\\n\\n  function renderUsingAddress(address user) external view returns (string memory) {\\n    return\\n      string.concat(\\n        ENCODING,\\n        INounsDescriptor(_nounsDescriptor).generateSVGImage(\\n          _generateSeed(_generateInputFromAddress(user))\\n        )\\n      );\\n  }\\n\\n  function renderUsingEnsName(string memory ensName) external view returns (string memory) {\\n    return\\n      string.concat(\\n        ENCODING,\\n        INounsDescriptor(_nounsDescriptor).generateSVGImage(\\n          _generateSeed(_generateInputFromName(ensName))\\n        )\\n      );\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Internal Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function _generateInputFromAddress(address _address) internal view returns (uint256) {\\n    string memory toEnsName_ = _reverseName(_address);\\n    return uint256(_encodeName(toEnsName_));\\n  }\\n\\n  function _generateInputFromSeed(bytes32 _seed) internal view returns (uint256) {\\n    return uint256(_seed);\\n  }\\n\\n  function _generateInputFromName(string memory _ensName) internal pure returns (uint256) {\\n    return uint256(_encodeName(_ensName));\\n  }\\n\\n  function _encodeName(string memory _name) internal pure returns (bytes32) {\\n    (, bytes32 _node) = _name.dnsEncodeName();\\n    return _node;\\n  }\\n\\n  function _reverseName(address _address) internal view returns (string memory) {\\n    address[] memory t = new address[](1);\\n    t[0] = _address;\\n    return IENSReverseRecords(_ensReverseRecords).getNames(t)[0];\\n  }\\n\\n  function _generateSeed(uint256 _pseudorandomness)\\n    private\\n    view\\n    returns (INounsSeeder.Seed memory)\\n  {\\n    uint256 backgroundCount = INounsDescriptor(_nounsDescriptor).backgroundCount();\\n    uint256 bodyCount = INounsDescriptor(_nounsDescriptor).bodyCount();\\n    uint256 accessoryCount = INounsDescriptor(_nounsDescriptor).accessoryCount();\\n    uint256 headCount = INounsDescriptor(_nounsDescriptor).headCount();\\n    uint256 glassesCount = INounsDescriptor(_nounsDescriptor).glassesCount();\\n\\n    return\\n      INounsSeeder.Seed({\\n        background: uint48(uint48(_pseudorandomness) % backgroundCount),\\n        body: uint48(uint48(_pseudorandomness >> 48) % bodyCount),\\n        accessory: uint48(uint48(_pseudorandomness >> 96) % accessoryCount),\\n        head: uint48(uint48(_pseudorandomness >> 144) % headCount),\\n        glasses: uint48(uint48(_pseudorandomness >> 192) % glassesCount)\\n      });\\n  }\\n\\n  function generate(uint256 _tokenId, string memory _alias) public view returns (string memory) {\\n    return string(\\\"\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x6aa89a0ddca97a701899e1a70e30b4e5b4a188a42d0d2d399f89f87c222a58f7\",\"license\":\"GPL-3.0\"},\"contracts/ERC721K.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport { ERC721Storage } from \\\"./ERC721Storage.sol\\\";\\n\\n/**\\n * @title ERC721K\\n * @author Kames Geraghty\\n */\\nabstract contract ERC721K is ERC721, Ownable {\\n  /// @notice ID counter for ERC721 tokens\\n  uint256 internal _idCounter;\\n\\n  /// @notice ENSReverseRecords instance\\n  address internal _erc721Storage;\\n\\n  event ERC721StorageUpdated(address erc721Storage);\\n\\n  /**\\n   * @notice ERC721K Construction\\n   * @param name_ string - Name of ERC721 token\\n   * @param symbol_ string - Symbol of ERC721 token\\n   * @param _erc721Storage_ address - Metadata instance\\n   */\\n  constructor(\\n    string memory name_,\\n    string memory symbol_,\\n    address _erc721Storage_\\n  ) ERC721(name_, symbol_) {\\n    _erc721Storage = _erc721Storage_;\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Virtual Functions                                                                     */\\n  /* ===================================================================================== */\\n  function _tokenData(uint256 tokenId)\\n    internal\\n    view\\n    virtual\\n    returns (bytes memory output0_, bytes memory output1_);\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function contractURI() external view returns (string memory) {\\n    return ERC721Storage(_erc721Storage).constructContractURI();\\n  }\\n\\n  function totalSupply() external view returns (uint256) {\\n    return _idCounter;\\n  }\\n\\n  function getERC721Storage() external view returns (address) {\\n    return _erc721Storage;\\n  }\\n\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    (bytes memory input0, bytes memory input1) = _tokenData(tokenId);\\n    return ERC721Storage(_erc721Storage).constructTokenURI(tokenId, input0, input1);\\n  }\\n\\n  function setStorage(address erc721Storage) external onlyOwner {\\n    _erc721Storage = erc721Storage;\\n    emit ERC721StorageUpdated(erc721Storage);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC721)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n}\\n\",\"keccak256\":\"0xf3130595ac1af44b0797b20d8444e0d49c748b80ab5a582523e2ecc2e5c52f89\",\"license\":\"MIT\"},\"contracts/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport { Base64 } from \\\"base64-sol/base64.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ISVGRender } from \\\"./interfaces/ISVGRender.sol\\\";\\nimport { ITraitsFetch } from \\\"./interfaces/ITraitsFetch.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721Storage\\n * @author Kames Geraghty\\n */\\nabstract contract ERC721Storage is Ownable {\\n  address internal _svgRender;\\n  address internal _traitsFetch;\\n  ContractURI internal _contractURI;\\n\\n  struct ContractURI {\\n    string name;\\n    string description;\\n    string image;\\n    string externalLink;\\n    string sellerFeeBasisPoints;\\n    string feeRecipient;\\n  }\\n\\n  event SvgRenderUpdated(address svgRender);\\n\\n  event TraitsFetchUpdated(address traitsFetch);\\n\\n  event ContractURIUpdated(ContractURI contractURI);\\n\\n  constructor(\\n    address _svgRender_,\\n    address _traitsFetch_,\\n    ContractURI memory _contractURI_\\n  ) {\\n    _svgRender = _svgRender_;\\n    _traitsFetch = _traitsFetch_;\\n    _contractURI = _contractURI_;\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Virtual Functions                                                                     */\\n  /* ===================================================================================== */\\n\\n  function _parseName(uint256 _tokenId) internal view virtual returns (string memory);\\n\\n  function _parseDescription(uint256 _tokenId) internal view virtual returns (string memory);\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n  function getSvgRender() external view returns (address) {\\n    return _svgRender;\\n  }\\n\\n  function getTraitsFetch() external view returns (address) {\\n    return _traitsFetch;\\n  }\\n\\n  function getContractDescription() external view returns (ContractURI memory) {\\n    return _contractURI;\\n  }\\n\\n  function preview(bytes memory input) external view returns (string memory) {\\n    return ISVGRender(_svgRender).render(input);\\n  }\\n\\n  function constructTokenURI(\\n    uint256 tokenId,\\n    bytes memory input0,\\n    bytes memory input1\\n  ) external view returns (string memory uri) {\\n    string memory image_ = ISVGRender(_svgRender).render(input0);\\n    string memory traits_ = ITraitsFetch(_traitsFetch).fetch(input1);\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              string.concat(\\n                '{\\\"name\\\":',\\n                '\\\"',\\n                _parseName(tokenId),\\n                '\\\",',\\n                '\\\"description\\\":',\\n                '\\\"',\\n                _parseDescription(tokenId),\\n                '\\\",',\\n                '\\\"image\\\":',\\n                '\\\"',\\n                image_,\\n                '\\\",',\\n                '\\\"attributes\\\": [',\\n                traits_,\\n                \\\"]\\\",\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function constructContractURI() external view returns (string memory uri) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              string.concat(\\n                '{\\\"name\\\":',\\n                '\\\"',\\n                _contractURI.name,\\n                '\\\",',\\n                '\\\"description\\\":',\\n                '\\\"',\\n                _contractURI.description,\\n                '\\\",',\\n                '\\\"image\\\":',\\n                '\\\"',\\n                _contractURI.image,\\n                '\\\",',\\n                '\\\"externalLink\\\":',\\n                '\\\"',\\n                _contractURI.externalLink,\\n                '\\\",',\\n                '\\\"sellerFeeBasisPoints\\\":',\\n                '\\\"',\\n                _contractURI.sellerFeeBasisPoints,\\n                '\\\",',\\n                '\\\"feeRecipient\\\":',\\n                '\\\"',\\n                _contractURI.feeRecipient,\\n                '\\\"',\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function setSvgRender(address svgRender) external onlyOwner {\\n    _svgRender = svgRender;\\n    emit SvgRenderUpdated(svgRender);\\n  }\\n\\n  function setTraitsFetch(address traitsFetch) external onlyOwner {\\n    _traitsFetch = traitsFetch;\\n    emit TraitsFetchUpdated(traitsFetch);\\n  }\\n\\n  function setContractURI(ContractURI memory contractURI) external onlyOwner {\\n    _contractURI = contractURI;\\n    emit ContractURIUpdated(contractURI);\\n  }\\n}\\n\",\"keccak256\":\"0x6af50039764df03c6057da9ed79722cf80685849ecb38122a2f61601aa97d432\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IENSReverseRecords.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.6;\\n\\nabstract contract IENSReverseRecords {\\n    function getNames(address[] calldata addresses) external view virtual returns (string[] memory r);\\n}\\n\",\"keccak256\":\"0x246924a3f9ee9048634212061d63adf1a9fbd0f153f874c6fd8bd988650e9e55\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/INounsDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for NounsDescriptor\\n\\n/*********************************\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n *********************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport { INounsSeeder } from './INounsSeeder.sol';\\n\\ninterface INounsDescriptor {\\n    event PartsLocked();\\n\\n    event DataURIToggled(bool enabled);\\n\\n    event BaseURIUpdated(string baseURI);\\n\\n    function arePartsLocked() external returns (bool);\\n\\n    function isDataURIEnabled() external returns (bool);\\n\\n    function baseURI() external returns (string memory);\\n\\n    function palettes(uint8 paletteIndex, uint256 colorIndex) external view returns (string memory);\\n\\n    function backgrounds(uint256 index) external view returns (string memory);\\n\\n    function bodies(uint256 index) external view returns (bytes memory);\\n\\n    function accessories(uint256 index) external view returns (bytes memory);\\n\\n    function heads(uint256 index) external view returns (bytes memory);\\n\\n    function glasses(uint256 index) external view returns (bytes memory);\\n\\n    function backgroundCount() external view returns (uint256);\\n\\n    function bodyCount() external view returns (uint256);\\n\\n    function accessoryCount() external view returns (uint256);\\n\\n    function headCount() external view returns (uint256);\\n\\n    function glassesCount() external view returns (uint256);\\n\\n    function addManyColorsToPalette(uint8 paletteIndex, string[] calldata newColors) external;\\n\\n    function addManyBackgrounds(string[] calldata backgrounds) external;\\n\\n    function addManyBodies(bytes[] calldata bodies) external;\\n\\n    function addManyAccessories(bytes[] calldata accessories) external;\\n\\n    function addManyHeads(bytes[] calldata heads) external;\\n\\n    function addManyGlasses(bytes[] calldata glasses) external;\\n\\n    function addColorToPalette(uint8 paletteIndex, string calldata color) external;\\n\\n    function addBackground(string calldata background) external;\\n\\n    function addBody(bytes calldata body) external;\\n\\n    function addAccessory(bytes calldata accessory) external;\\n\\n    function addHead(bytes calldata head) external;\\n\\n    function addGlasses(bytes calldata glasses) external;\\n\\n    function lockParts() external;\\n\\n    function toggleDataURIEnabled() external;\\n\\n    function setBaseURI(string calldata baseURI) external;\\n\\n    function tokenURI(uint256 tokenId, INounsSeeder.Seed memory seed) external view returns (string memory);\\n\\n    function dataURI(uint256 tokenId, INounsSeeder.Seed memory seed) external view returns (string memory);\\n\\n    function genericDataURI(\\n        string calldata name,\\n        string calldata description,\\n        INounsSeeder.Seed memory seed\\n    ) external view returns (string memory);\\n\\n    function generateSVGImage(INounsSeeder.Seed memory seed) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x87bac5321fd5d5cc8c7b4e83cebb68b28ec8ccea25890441f24f21e5349798ef\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/INounsSeeder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for NounsSeeder\\n\\n/*********************************\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n *********************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport { INounsDescriptor } from './INounsDescriptor.sol';\\n\\ninterface INounsSeeder {\\n    struct Seed {\\n        uint48 background;\\n        uint48 body;\\n        uint48 accessory;\\n        uint48 head;\\n        uint48 glasses;\\n    }\\n\\n    function generateSeed(uint256 nounId, INounsDescriptor descriptor) external view returns (Seed memory);\\n}\\n\",\"keccak256\":\"0x1d4912076a8f3c7f01eefe415161590c32efe1a32eb1211a09da6808191c23db\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISVGRender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface ISVGRender {\\n  function render(bytes memory input) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x40b1890b472a84f0867a826065039eb787f1f3c4f1a79a71b877752c70152967\",\"license\":\"MIT\"},\"contracts/interfaces/ITraitsFetch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface ITraitsFetch {\\n  function fetch(bytes memory input) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x8454d6dcf4c798032b7459026b6fa23f586b76400175a27c9b100c1aca36c5a9\",\"license\":\"MIT\"},\"contracts/libraries/BytesUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nlibrary BytesUtils {\\n  /*\\n   * @dev Returns the keccak-256 hash of a byte range.\\n   * @param self The byte string to hash.\\n   * @param offset The position to start hashing at.\\n   * @param len The number of bytes to hash.\\n   * @return The hash of the byte range.\\n   */\\n  function keccak(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(offset + len <= self.length);\\n    assembly {\\n      ret := keccak256(add(add(self, 32), offset), len)\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the ENS namehash of a DNS-encoded name.\\n   * @param self The DNS-encoded name to hash.\\n   * @param offset The offset at which to start hashing.\\n   * @return The namehash of the name.\\n   */\\n  function namehash(bytes memory self, uint256 offset) internal pure returns (bytes32) {\\n    (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\n    if (labelhash == bytes32(0)) {\\n      require(offset == self.length - 1, \\\"namehash: Junk at end of name\\\");\\n      return bytes32(0);\\n    }\\n    return keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\n  }\\n\\n  /**\\n   * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\n   * @param self The byte string to read a label from.\\n   * @param idx The index to read a label at.\\n   * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\n   * @return newIdx The index of the start of the next label.\\n   */\\n  function readLabel(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes32 labelhash, uint256 newIdx)\\n  {\\n    require(idx < self.length, \\\"readLabel: Index out of bounds\\\");\\n    uint256 len = uint256(uint8(self[idx]));\\n    if (len > 0) {\\n      labelhash = keccak(self, idx + 1, len);\\n    } else {\\n      labelhash = bytes32(0);\\n    }\\n    newIdx = idx + len + 1;\\n  }\\n}\\n\",\"keccak256\":\"0x319e6759879d5d686e11aa0b546c6fac08e2cb5e5c92b41bd852c48159f2f2b4\",\"license\":\"MIT\"},\"contracts/libraries/NameEncoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./BytesUtils.sol\\\";\\n\\nlibrary NameEncoder {\\n  using BytesUtils for bytes;\\n\\n  function dnsEncodeName(string memory name)\\n    internal\\n    pure\\n    returns (bytes memory dnsName, bytes32 node)\\n  {\\n    uint8 labelLength = 0;\\n    bytes memory bytesName = bytes(name);\\n    uint256 length = bytesName.length;\\n    dnsName = new bytes(length + 2);\\n    node = 0;\\n    if (length == 0) {\\n      dnsName[0] = 0;\\n      return (dnsName, node);\\n    }\\n\\n    // use unchecked to save gas since we check for an underflow\\n    // and we check for the length before the loop\\n    unchecked {\\n      for (uint256 i = length - 1; i >= 0; i--) {\\n        if (bytesName[i] == \\\".\\\") {\\n          dnsName[i + 1] = bytes1(labelLength);\\n          node = keccak256(abi.encodePacked(node, bytesName.keccak(i + 1, labelLength)));\\n          labelLength = 0;\\n        } else {\\n          labelLength += 1;\\n          dnsName[i + 1] = bytesName[i];\\n        }\\n        if (i == 0) {\\n          break;\\n        }\\n      }\\n    }\\n\\n    node = keccak256(abi.encodePacked(node, bytesName.keccak(0, labelLength)));\\n\\n    dnsName[0] = bytes1(labelLength);\\n    return (dnsName, node);\\n  }\\n}\\n\",\"keccak256\":\"0x3226a3f83a46c88c88218c261c9002571acd4cdce39c7acabdb59d00c91142ac\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002699380380620026998339810160408190526200003491620001ef565b838383828260006200004783826200030d565b5060016200005682826200030d565b505050620000736200006d620000af60201b60201c565b620000b3565b600880546001600160a01b039283166001600160a01b031991821617909155600980549590921694169390931790925550620003d99350505050565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200012d57600080fd5b81516001600160401b03808211156200014a576200014a62000105565b604051601f8301601f19908116603f0116810190828211818310171562000175576200017562000105565b816040528381526020925086838588010111156200019257600080fd5b600091505b83821015620001b6578582018301518183018401529082019062000197565b83821115620001c85760008385830101525b9695505050505050565b80516001600160a01b0381168114620001ea57600080fd5b919050565b600080600080608085870312156200020657600080fd5b84516001600160401b03808211156200021e57600080fd5b6200022c888389016200011b565b955060208701519150808211156200024357600080fd5b5062000252878288016200011b565b9350506200026360408601620001d2565b91506200027360608601620001d2565b905092959194509250565b600181811c908216806200029357607f821691505b602082108103620002b457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200030857600081815260208120601f850160051c81016020861015620002e35750805b601f850160051c820191505b818110156200030457828155600101620002ef565b5050505b505050565b81516001600160401b0381111562000329576200032962000105565b62000341816200033a84546200027e565b84620002ba565b602080601f831160018114620003795760008415620003605750858301515b600019600386901b1c1916600185901b17855562000304565b600085815260208120601f198616915b82811015620003aa5788860151825594840194600190910190840162000389565b5085821015620003c95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6122b080620003e96000396000f3fe6080604052600436106101bb5760003560e01c806365f68c89116100ec578063a22cb4651161008a578063c87b56dd11610064578063c87b56dd146104e0578063e8a3d48514610500578063e985e9c514610515578063f2fde38b1461055e57600080fd5b8063a22cb46514610482578063b88d4fde146104a2578063bb636388146104c257600080fd5b806387a89ee6116100c657806387a89ee6146104115780638da5cb5b1461042f5780639137c1a71461044d57806395d89b411461046d57600080fd5b806365f68c89146103a657806370a08231146103dc578063715018a6146103fc57600080fd5b80632e1a7d4d116101595780634e71d92d116101335780634e71d92d1461033e5780634f53c4e2146103465780635ad0ca9d146103665780636352211e1461038657600080fd5b80632e1a7d4d146102de5780632f54bf6e146102fe57806342842e0e1461031e57600080fd5b8063095ea7b311610195578063095ea7b31461025f57806313a69df91461027f57806318160ddd1461029f57806323b872dd146102be57600080fd5b806301ffc9a7146101d057806306fdde0314610205578063081812fc1461022757600080fd5b366101cb576101c93361057e565b005b600080fd5b3480156101dc57600080fd5b506101f06101eb366004611bf0565b6105ed565b60405190151581526020015b60405180910390f35b34801561021157600080fd5b5061021a6105fe565b6040516101fc9190611c6c565b34801561023357600080fd5b50610247610242366004611c7f565b610690565b6040516001600160a01b0390911681526020016101fc565b34801561026b57600080fd5b506101c961027a366004611cad565b610725565b34801561028b57600080fd5b5061021a61029a366004611cd9565b61083a565b3480156102ab57600080fd5b506007545b6040519081526020016101fc565b3480156102ca57600080fd5b506101c96102d9366004611cf6565b610919565b3480156102ea57600080fd5b506101c96102f9366004611c7f565b6109a3565b34801561030a57600080fd5b506101f0610319366004611cd9565b610a54565b34801561032a57600080fd5b506101c9610339366004611cf6565b610a80565b6101c9610a9b565b34801561035257600080fd5b506101c9610361366004611cd9565b610aa6565b34801561037257600080fd5b5061021a610381366004611de4565b610b10565b34801561039257600080fd5b506102476103a1366004611c7f565b610ba9565b3480156103b257600080fd5b506102b06103c1366004611cd9565b6001600160a01b03166000908152600a602052604090205490565b3480156103e857600080fd5b506102b06103f7366004611cd9565b610c20565b34801561040857600080fd5b506101c9610ca7565b34801561041d57600080fd5b506008546001600160a01b0316610247565b34801561043b57600080fd5b506006546001600160a01b0316610247565b34801561045957600080fd5b506101c9610468366004611cd9565b610cdb565b34801561047957600080fd5b5061021a610d53565b34801561048e57600080fd5b506101c961049d366004611e2d565b610d62565b3480156104ae57600080fd5b506101c96104bd366004611e6b565b610d6d565b3480156104ce57600080fd5b506009546001600160a01b0316610247565b3480156104ec57600080fd5b5061021a6104fb366004611c7f565b610de9565b34801561050c57600080fd5b5061021a610e7c565b34801561052157600080fd5b506101f0610530366004611eeb565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561056a57600080fd5b506101c9610579366004611cd9565b610ef3565b61058781610c20565b6000036105a85760078054600101908190556105a4908290610f8b565b5050565b60405162461bcd60e51b815260206004820152601260248201527111539bdd5b9cce9c1c995d8b5a5cdcdd595960721b60448201526064015b60405180910390fd5b50565b60006105f8826110a4565b92915050565b60606000805461060d90611f19565b80601f016020809104026020016040519081016040528092919081815260200182805461063990611f19565b80156106865780601f1061065b57610100808354040283529160200191610686565b820191906000526020600020905b81548152906001019060200180831161066957829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166107095760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016105e1565b506000908152600460205260409020546001600160a01b031690565b600061073082610ba9565b9050806001600160a01b0316836001600160a01b03160361079d5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016105e1565b336001600160a01b03821614806107b957506107b98133610530565b61082b5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016105e1565b61083583836110f4565b505050565b60085460408051634d0b849560e11b815290516060926001600160a01b031691639a17092a9160048083019260209291908290030181865afa158015610884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a89190611f53565b6040516315084f9960e31b81526001600160a01b038481166004830152919091169063a8427cc8906024015b600060405180830381865afa1580156108f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105f89190810190611fb5565b6001600160a01b03831661094a576109448260076000815461093a90612000565b9182905550610f8b565b50505050565b61095382610c20565b156109985760405162461bcd60e51b815260206004820152601560248201527422a737bab7399d31bab93932b73a16b437b63232b960591b60448201526064016105e1565b610944838383611162565b6006546001600160a01b031633146109cd5760405162461bcd60e51b81526004016105e190612019565b604051600090339083908381818185875af1925050503d8060008114610a0f576040519150601f19603f3d011682016040523d82523d6000602084013e610a14565b606091505b50509050806105a45760405162461bcd60e51b815260206004820152600c60248201526b08a9cdeeadce674ead05aded60a31b60448201526064016105e1565b6001600160a01b0381166000908152600a6020526040812054610a785760006105f8565b600192915050565b61083583838360405180602001604052806000815250610d6d565b610aa43361057e565b565b6006546001600160a01b03163314610ad05760405162461bcd60e51b81526004016105e190612019565b6040516001600160a01b03821681527f848a8875b475d071d046367618487f37b45ec544f8c70982fb4917f128ee232b906020015b60405180910390a150565b60085460408051634d0b849560e11b815290516060926001600160a01b031691639a17092a9160048083019260209291908290030181865afa158015610b5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7e9190611f53565b6001600160a01b031663a53344e7836040518263ffffffff1660e01b81526004016108d49190611c6c565b6000818152600260205260408120546001600160a01b0316806105f85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016105e1565b60006001600160a01b038216610c8b5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016105e1565b506001600160a01b031660009081526003602052604090205490565b6006546001600160a01b03163314610cd15760405162461bcd60e51b81526004016105e190612019565b610aa46000611242565b6006546001600160a01b03163314610d055760405162461bcd60e51b81526004016105e190612019565b600880546001600160a01b0319166001600160a01b0383169081179091556040519081527fd833c7cea3bce2562e201bf7e85016d0bc1173580c719f63378cc5d0457552b690602001610b05565b60606001805461060d90611f19565b6105a4338383611294565b610d773383611362565b610ddd5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b60648201526084016105e1565b61094484848484611458565b6060600080610df78461148b565b600854604051637833cb0b60e11b81529294509092506001600160a01b03169063f067961690610e2f9087908690869060040161204e565b600060405180830381865afa158015610e4c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e749190810190611fb5565b949350505050565b60085460408051631c97e82760e21b815290516060926001600160a01b03169163725fa09c9160048083019260009291908290030181865afa158015610ec6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610eee9190810190611fb5565b905090565b6006546001600160a01b03163314610f1d5760405162461bcd60e51b81526004016105e190612019565b6001600160a01b038116610f825760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105e1565b6105ea81611242565b600080610f9f610f9a856114f8565b6115d6565b905080600003610ff15760405162461bcd60e51b815260206004820152601760248201527f454e6f756e733a696e76616c69642d656e732d6e6f646500000000000000000060448201526064016105e1565b6000818152600c60205260409020546001600160a01b03161561104b5760405162461bcd60e51b815260206004820152601260248201527119539bdd5b9cce9c1c995d8b5a5cdcdd595960721b60448201526064016105e1565b61105584846115e2565b6001600160a01b0384166000818152600a60209081526040808320879055868352600b8252808320859055938252600c90529190912080546001600160a01b0319169091179055508092915050565b60006001600160e01b031982166380ac58cd60e01b14806110d557506001600160e01b03198216635b5e139f60e01b145b806105f857506301ffc9a760e01b6001600160e01b03198316146105f8565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061112982610ba9565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000836001600160a01b0316600c600061117e610f9a876114f8565b81526020810191909152604001600020546001600160a01b0316146111da5760405162461bcd60e51b8152602060048201526012602482015271654e6f756e733a696e76616c69642d656e7360701b60448201526064016105e1565b6000828152600b60205260409020546111f4858585611724565b6001600160a01b039485166000908152600a602090815260408083208390559590961680825285822094909455908152600c9094529190922080546001600160a01b03191690921790915590565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036112f55760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105e1565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000818152600260205260408120546001600160a01b03166113db5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016105e1565b60006113e683610ba9565b9050806001600160a01b0316846001600160a01b0316148061142d57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610e745750836001600160a01b031661144684610690565b6001600160a01b031614949350505050565b611463848484611724565b61146f848484846118c0565b6109445760405162461bcd60e51b81526004016105e190612083565b6000818152600b60209081526040808320548151928301526060928392909101604051602081830303815290604052905060006114c785610ba9565b604080516001600160a01b0390921660208301520160408051601f1981840301815291905291959194509092505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611532576115326120d5565b6001600160a01b0392831660209182029290920101526009546040516332fe2d9b60e21b815291169063cbf8b66c9061156f9084906004016120eb565b600060405180830381865afa15801561158c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115b49190810190612138565b6000815181106115c6576115c66120d5565b6020026020010151915050919050565b600080610e74836119c1565b6001600160a01b0382166116385760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105e1565b6000818152600260205260409020546001600160a01b03161561169d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105e1565b6001600160a01b03821660009081526003602052604081208054600192906116c69084906121fb565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b826001600160a01b031661173782610ba9565b6001600160a01b03161461179b5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016105e1565b6001600160a01b0382166117fd5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105e1565b6118086000826110f4565b6001600160a01b0383166000908152600360205260408120805460019290611831908490612213565b90915550506001600160a01b038216600090815260036020526040812080546001929061185f9084906121fb565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006001600160a01b0384163b156119b657604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061190490339089908890889060040161222a565b6020604051808303816000875af192505050801561193f575060408051601f3d908101601f1916820190925261193c9181019061225d565b60015b61199c573d80801561196d576040519150601f19603f3d011682016040523d82523d6000602084013e611972565b606091505b5080516000036119945760405162461bcd60e51b81526004016105e190612083565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610e74565b506001949350505050565b8051606090600090819084906119d88160026121fb565b67ffffffffffffffff8111156119f0576119f0611d37565b6040519080825280601f01601f191660200182016040528015611a1a576020820181803683370190505b50945060009350808403611a5f57600060f81b85600081518110611a4057611a406120d5565b60200101906001600160f81b031916908160001a905350505050915091565b60001981015b828181518110611a7757611a776120d5565b01602001516001600160f81b031916601760f91b03611b05578360f81b868260010181518110611aa957611aa96120d5565b60200101906001600160f81b031916908160001a90535084611ad2846001840160ff8816611bb6565b60408051602081019390935282015260600160405160208183030381529060405280519060200120945060009350611b55565b600184019350828181518110611b1d57611b1d6120d5565b602001015160f81c60f81b868260010181518110611b3d57611b3d6120d5565b60200101906001600160f81b031916908160001a9053505b8015611b645760001901611a65565b5083611b7583600060ff8716611bb6565b6040805160208101939093528201526060016040516020818303038152906040528051906020012093508260f81b85600081518110611a4057611a406120d5565b8251600090611bc583856121fb565b1115611bd057600080fd5b5091016020012090565b6001600160e01b0319811681146105ea57600080fd5b600060208284031215611c0257600080fd5b8135611c0d81611bda565b9392505050565b60005b83811015611c2f578181015183820152602001611c17565b838111156109445750506000910152565b60008151808452611c58816020860160208601611c14565b601f01601f19169290920160200192915050565b602081526000611c0d6020830184611c40565b600060208284031215611c9157600080fd5b5035919050565b6001600160a01b03811681146105ea57600080fd5b60008060408385031215611cc057600080fd5b8235611ccb81611c98565b946020939093013593505050565b600060208284031215611ceb57600080fd5b8135611c0d81611c98565b600080600060608486031215611d0b57600080fd5b8335611d1681611c98565b92506020840135611d2681611c98565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611d7657611d76611d37565b604052919050565b600067ffffffffffffffff821115611d9857611d98611d37565b50601f01601f191660200190565b6000611db9611db484611d7e565b611d4d565b9050828152838383011115611dcd57600080fd5b828260208301376000602084830101529392505050565b600060208284031215611df657600080fd5b813567ffffffffffffffff811115611e0d57600080fd5b8201601f81018413611e1e57600080fd5b610e7484823560208401611da6565b60008060408385031215611e4057600080fd5b8235611e4b81611c98565b915060208301358015158114611e6057600080fd5b809150509250929050565b60008060008060808587031215611e8157600080fd5b8435611e8c81611c98565b93506020850135611e9c81611c98565b925060408501359150606085013567ffffffffffffffff811115611ebf57600080fd5b8501601f81018713611ed057600080fd5b611edf87823560208401611da6565b91505092959194509250565b60008060408385031215611efe57600080fd5b8235611f0981611c98565b91506020830135611e6081611c98565b600181811c90821680611f2d57607f821691505b602082108103611f4d57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215611f6557600080fd5b8151611c0d81611c98565b600082601f830112611f8157600080fd5b8151611f8f611db482611d7e565b818152846020838601011115611fa457600080fd5b610e74826020830160208701611c14565b600060208284031215611fc757600080fd5b815167ffffffffffffffff811115611fde57600080fd5b610e7484828501611f70565b634e487b7160e01b600052601160045260246000fd5b60006001820161201257612012611fea565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8381526060602082015260006120676060830185611c40565b82810360408401526120798185611c40565b9695505050505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6020808252825182820181905260009190848201906040850190845b8181101561212c5783516001600160a01b031683529284019291840191600101612107565b50909695505050505050565b6000602080838503121561214b57600080fd5b825167ffffffffffffffff8082111561216357600080fd5b818501915085601f83011261217757600080fd5b81518181111561218957612189611d37565b8060051b612198858201611d4d565b91825283810185019185810190898411156121b257600080fd5b86860192505b838310156121ee578251858111156121d05760008081fd5b6121de8b89838a0101611f70565b83525091860191908601906121b8565b9998505050505050505050565b6000821982111561220e5761220e611fea565b500190565b60008282101561222557612225611fea565b500390565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061207990830184611c40565b60006020828403121561226f57600080fd5b8151611c0d81611bda56fea26469706673582212205711976da822060db6f13c6d87891a29fb5b7512618e62305ea8f8f7b347169664736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106101bb5760003560e01c806365f68c89116100ec578063a22cb4651161008a578063c87b56dd11610064578063c87b56dd146104e0578063e8a3d48514610500578063e985e9c514610515578063f2fde38b1461055e57600080fd5b8063a22cb46514610482578063b88d4fde146104a2578063bb636388146104c257600080fd5b806387a89ee6116100c657806387a89ee6146104115780638da5cb5b1461042f5780639137c1a71461044d57806395d89b411461046d57600080fd5b806365f68c89146103a657806370a08231146103dc578063715018a6146103fc57600080fd5b80632e1a7d4d116101595780634e71d92d116101335780634e71d92d1461033e5780634f53c4e2146103465780635ad0ca9d146103665780636352211e1461038657600080fd5b80632e1a7d4d146102de5780632f54bf6e146102fe57806342842e0e1461031e57600080fd5b8063095ea7b311610195578063095ea7b31461025f57806313a69df91461027f57806318160ddd1461029f57806323b872dd146102be57600080fd5b806301ffc9a7146101d057806306fdde0314610205578063081812fc1461022757600080fd5b366101cb576101c93361057e565b005b600080fd5b3480156101dc57600080fd5b506101f06101eb366004611bf0565b6105ed565b60405190151581526020015b60405180910390f35b34801561021157600080fd5b5061021a6105fe565b6040516101fc9190611c6c565b34801561023357600080fd5b50610247610242366004611c7f565b610690565b6040516001600160a01b0390911681526020016101fc565b34801561026b57600080fd5b506101c961027a366004611cad565b610725565b34801561028b57600080fd5b5061021a61029a366004611cd9565b61083a565b3480156102ab57600080fd5b506007545b6040519081526020016101fc565b3480156102ca57600080fd5b506101c96102d9366004611cf6565b610919565b3480156102ea57600080fd5b506101c96102f9366004611c7f565b6109a3565b34801561030a57600080fd5b506101f0610319366004611cd9565b610a54565b34801561032a57600080fd5b506101c9610339366004611cf6565b610a80565b6101c9610a9b565b34801561035257600080fd5b506101c9610361366004611cd9565b610aa6565b34801561037257600080fd5b5061021a610381366004611de4565b610b10565b34801561039257600080fd5b506102476103a1366004611c7f565b610ba9565b3480156103b257600080fd5b506102b06103c1366004611cd9565b6001600160a01b03166000908152600a602052604090205490565b3480156103e857600080fd5b506102b06103f7366004611cd9565b610c20565b34801561040857600080fd5b506101c9610ca7565b34801561041d57600080fd5b506008546001600160a01b0316610247565b34801561043b57600080fd5b506006546001600160a01b0316610247565b34801561045957600080fd5b506101c9610468366004611cd9565b610cdb565b34801561047957600080fd5b5061021a610d53565b34801561048e57600080fd5b506101c961049d366004611e2d565b610d62565b3480156104ae57600080fd5b506101c96104bd366004611e6b565b610d6d565b3480156104ce57600080fd5b506009546001600160a01b0316610247565b3480156104ec57600080fd5b5061021a6104fb366004611c7f565b610de9565b34801561050c57600080fd5b5061021a610e7c565b34801561052157600080fd5b506101f0610530366004611eeb565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561056a57600080fd5b506101c9610579366004611cd9565b610ef3565b61058781610c20565b6000036105a85760078054600101908190556105a4908290610f8b565b5050565b60405162461bcd60e51b815260206004820152601260248201527111539bdd5b9cce9c1c995d8b5a5cdcdd595960721b60448201526064015b60405180910390fd5b50565b60006105f8826110a4565b92915050565b60606000805461060d90611f19565b80601f016020809104026020016040519081016040528092919081815260200182805461063990611f19565b80156106865780601f1061065b57610100808354040283529160200191610686565b820191906000526020600020905b81548152906001019060200180831161066957829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166107095760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016105e1565b506000908152600460205260409020546001600160a01b031690565b600061073082610ba9565b9050806001600160a01b0316836001600160a01b03160361079d5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016105e1565b336001600160a01b03821614806107b957506107b98133610530565b61082b5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016105e1565b61083583836110f4565b505050565b60085460408051634d0b849560e11b815290516060926001600160a01b031691639a17092a9160048083019260209291908290030181865afa158015610884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a89190611f53565b6040516315084f9960e31b81526001600160a01b038481166004830152919091169063a8427cc8906024015b600060405180830381865afa1580156108f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105f89190810190611fb5565b6001600160a01b03831661094a576109448260076000815461093a90612000565b9182905550610f8b565b50505050565b61095382610c20565b156109985760405162461bcd60e51b815260206004820152601560248201527422a737bab7399d31bab93932b73a16b437b63232b960591b60448201526064016105e1565b610944838383611162565b6006546001600160a01b031633146109cd5760405162461bcd60e51b81526004016105e190612019565b604051600090339083908381818185875af1925050503d8060008114610a0f576040519150601f19603f3d011682016040523d82523d6000602084013e610a14565b606091505b50509050806105a45760405162461bcd60e51b815260206004820152600c60248201526b08a9cdeeadce674ead05aded60a31b60448201526064016105e1565b6001600160a01b0381166000908152600a6020526040812054610a785760006105f8565b600192915050565b61083583838360405180602001604052806000815250610d6d565b610aa43361057e565b565b6006546001600160a01b03163314610ad05760405162461bcd60e51b81526004016105e190612019565b6040516001600160a01b03821681527f848a8875b475d071d046367618487f37b45ec544f8c70982fb4917f128ee232b906020015b60405180910390a150565b60085460408051634d0b849560e11b815290516060926001600160a01b031691639a17092a9160048083019260209291908290030181865afa158015610b5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7e9190611f53565b6001600160a01b031663a53344e7836040518263ffffffff1660e01b81526004016108d49190611c6c565b6000818152600260205260408120546001600160a01b0316806105f85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016105e1565b60006001600160a01b038216610c8b5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016105e1565b506001600160a01b031660009081526003602052604090205490565b6006546001600160a01b03163314610cd15760405162461bcd60e51b81526004016105e190612019565b610aa46000611242565b6006546001600160a01b03163314610d055760405162461bcd60e51b81526004016105e190612019565b600880546001600160a01b0319166001600160a01b0383169081179091556040519081527fd833c7cea3bce2562e201bf7e85016d0bc1173580c719f63378cc5d0457552b690602001610b05565b60606001805461060d90611f19565b6105a4338383611294565b610d773383611362565b610ddd5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b60648201526084016105e1565b61094484848484611458565b6060600080610df78461148b565b600854604051637833cb0b60e11b81529294509092506001600160a01b03169063f067961690610e2f9087908690869060040161204e565b600060405180830381865afa158015610e4c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e749190810190611fb5565b949350505050565b60085460408051631c97e82760e21b815290516060926001600160a01b03169163725fa09c9160048083019260009291908290030181865afa158015610ec6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610eee9190810190611fb5565b905090565b6006546001600160a01b03163314610f1d5760405162461bcd60e51b81526004016105e190612019565b6001600160a01b038116610f825760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105e1565b6105ea81611242565b600080610f9f610f9a856114f8565b6115d6565b905080600003610ff15760405162461bcd60e51b815260206004820152601760248201527f454e6f756e733a696e76616c69642d656e732d6e6f646500000000000000000060448201526064016105e1565b6000818152600c60205260409020546001600160a01b03161561104b5760405162461bcd60e51b815260206004820152601260248201527119539bdd5b9cce9c1c995d8b5a5cdcdd595960721b60448201526064016105e1565b61105584846115e2565b6001600160a01b0384166000818152600a60209081526040808320879055868352600b8252808320859055938252600c90529190912080546001600160a01b0319169091179055508092915050565b60006001600160e01b031982166380ac58cd60e01b14806110d557506001600160e01b03198216635b5e139f60e01b145b806105f857506301ffc9a760e01b6001600160e01b03198316146105f8565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061112982610ba9565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000836001600160a01b0316600c600061117e610f9a876114f8565b81526020810191909152604001600020546001600160a01b0316146111da5760405162461bcd60e51b8152602060048201526012602482015271654e6f756e733a696e76616c69642d656e7360701b60448201526064016105e1565b6000828152600b60205260409020546111f4858585611724565b6001600160a01b039485166000908152600a602090815260408083208390559590961680825285822094909455908152600c9094529190922080546001600160a01b03191690921790915590565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036112f55760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105e1565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000818152600260205260408120546001600160a01b03166113db5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016105e1565b60006113e683610ba9565b9050806001600160a01b0316846001600160a01b0316148061142d57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610e745750836001600160a01b031661144684610690565b6001600160a01b031614949350505050565b611463848484611724565b61146f848484846118c0565b6109445760405162461bcd60e51b81526004016105e190612083565b6000818152600b60209081526040808320548151928301526060928392909101604051602081830303815290604052905060006114c785610ba9565b604080516001600160a01b0390921660208301520160408051601f1981840301815291905291959194509092505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611532576115326120d5565b6001600160a01b0392831660209182029290920101526009546040516332fe2d9b60e21b815291169063cbf8b66c9061156f9084906004016120eb565b600060405180830381865afa15801561158c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115b49190810190612138565b6000815181106115c6576115c66120d5565b6020026020010151915050919050565b600080610e74836119c1565b6001600160a01b0382166116385760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105e1565b6000818152600260205260409020546001600160a01b03161561169d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105e1565b6001600160a01b03821660009081526003602052604081208054600192906116c69084906121fb565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b826001600160a01b031661173782610ba9565b6001600160a01b03161461179b5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016105e1565b6001600160a01b0382166117fd5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105e1565b6118086000826110f4565b6001600160a01b0383166000908152600360205260408120805460019290611831908490612213565b90915550506001600160a01b038216600090815260036020526040812080546001929061185f9084906121fb565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006001600160a01b0384163b156119b657604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061190490339089908890889060040161222a565b6020604051808303816000875af192505050801561193f575060408051601f3d908101601f1916820190925261193c9181019061225d565b60015b61199c573d80801561196d576040519150601f19603f3d011682016040523d82523d6000602084013e611972565b606091505b5080516000036119945760405162461bcd60e51b81526004016105e190612083565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610e74565b506001949350505050565b8051606090600090819084906119d88160026121fb565b67ffffffffffffffff8111156119f0576119f0611d37565b6040519080825280601f01601f191660200182016040528015611a1a576020820181803683370190505b50945060009350808403611a5f57600060f81b85600081518110611a4057611a406120d5565b60200101906001600160f81b031916908160001a905350505050915091565b60001981015b828181518110611a7757611a776120d5565b01602001516001600160f81b031916601760f91b03611b05578360f81b868260010181518110611aa957611aa96120d5565b60200101906001600160f81b031916908160001a90535084611ad2846001840160ff8816611bb6565b60408051602081019390935282015260600160405160208183030381529060405280519060200120945060009350611b55565b600184019350828181518110611b1d57611b1d6120d5565b602001015160f81c60f81b868260010181518110611b3d57611b3d6120d5565b60200101906001600160f81b031916908160001a9053505b8015611b645760001901611a65565b5083611b7583600060ff8716611bb6565b6040805160208101939093528201526060016040516020818303038152906040528051906020012093508260f81b85600081518110611a4057611a406120d5565b8251600090611bc583856121fb565b1115611bd057600080fd5b5091016020012090565b6001600160e01b0319811681146105ea57600080fd5b600060208284031215611c0257600080fd5b8135611c0d81611bda565b9392505050565b60005b83811015611c2f578181015183820152602001611c17565b838111156109445750506000910152565b60008151808452611c58816020860160208601611c14565b601f01601f19169290920160200192915050565b602081526000611c0d6020830184611c40565b600060208284031215611c9157600080fd5b5035919050565b6001600160a01b03811681146105ea57600080fd5b60008060408385031215611cc057600080fd5b8235611ccb81611c98565b946020939093013593505050565b600060208284031215611ceb57600080fd5b8135611c0d81611c98565b600080600060608486031215611d0b57600080fd5b8335611d1681611c98565b92506020840135611d2681611c98565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611d7657611d76611d37565b604052919050565b600067ffffffffffffffff821115611d9857611d98611d37565b50601f01601f191660200190565b6000611db9611db484611d7e565b611d4d565b9050828152838383011115611dcd57600080fd5b828260208301376000602084830101529392505050565b600060208284031215611df657600080fd5b813567ffffffffffffffff811115611e0d57600080fd5b8201601f81018413611e1e57600080fd5b610e7484823560208401611da6565b60008060408385031215611e4057600080fd5b8235611e4b81611c98565b915060208301358015158114611e6057600080fd5b809150509250929050565b60008060008060808587031215611e8157600080fd5b8435611e8c81611c98565b93506020850135611e9c81611c98565b925060408501359150606085013567ffffffffffffffff811115611ebf57600080fd5b8501601f81018713611ed057600080fd5b611edf87823560208401611da6565b91505092959194509250565b60008060408385031215611efe57600080fd5b8235611f0981611c98565b91506020830135611e6081611c98565b600181811c90821680611f2d57607f821691505b602082108103611f4d57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215611f6557600080fd5b8151611c0d81611c98565b600082601f830112611f8157600080fd5b8151611f8f611db482611d7e565b818152846020838601011115611fa457600080fd5b610e74826020830160208701611c14565b600060208284031215611fc757600080fd5b815167ffffffffffffffff811115611fde57600080fd5b610e7484828501611f70565b634e487b7160e01b600052601160045260246000fd5b60006001820161201257612012611fea565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8381526060602082015260006120676060830185611c40565b82810360408401526120798185611c40565b9695505050505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6020808252825182820181905260009190848201906040850190845b8181101561212c5783516001600160a01b031683529284019291840191600101612107565b50909695505050505050565b6000602080838503121561214b57600080fd5b825167ffffffffffffffff8082111561216357600080fd5b818501915085601f83011261217757600080fd5b81518181111561218957612189611d37565b8060051b612198858201611d4d565b91825283810185019185810190898411156121b257600080fd5b86860192505b838310156121ee578251858111156121d05760008081fd5b6121de8b89838a0101611f70565b83525091860191908601906121b8565b9998505050505050505050565b6000821982111561220e5761220e611fea565b500190565b60008282101561222557612225611fea565b500390565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061207990830184611c40565b60006020828403121561226f57600080fd5b8151611c0d81611bda56fea26469706673582212205711976da822060db6f13c6d87891a29fb5b7512618e62305ea8f8f7b347169664736f6c634300080f0033",
  "devdoc": {
    "author": "Kames Geraghty",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "params": {
          "ensReverseRecords": "address - ENSReverseRecords instance",
          "erc721Storage": "address - ERC721Storage instance",
          "name": "string - Name of ERC721 token",
          "symbol": "string - Symbol of ERC721 token"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "eNouns",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "ENouns Construction"
      }
    },
    "notice": "Ethereum Noun System;  one Noun for every Primary ENS Name.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/ENouns.sol:ENouns",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 132,
        "contract": "contracts/ENouns.sol:ENouns",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 136,
        "contract": "contracts/ENouns.sol:ENouns",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 140,
        "contract": "contracts/ENouns.sol:ENouns",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 144,
        "contract": "contracts/ENouns.sol:ENouns",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 150,
        "contract": "contracts/ENouns.sol:ENouns",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/ENouns.sol:ENouns",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3013,
        "contract": "contracts/ENouns.sol:ENouns",
        "label": "_idCounter",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3016,
        "contract": "contracts/ENouns.sol:ENouns",
        "label": "_erc721Storage",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 1823,
        "contract": "contracts/ENouns.sol:ENouns",
        "label": "_ensReverseRecords",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 1828,
        "contract": "contracts/ENouns.sol:ENouns",
        "label": "_userToTokenId",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1833,
        "contract": "contracts/ENouns.sol:ENouns",
        "label": "_tokenIdToEnsNode",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 1838,
        "contract": "contracts/ENouns.sol:ENouns",
        "label": "_ensReverseRecordsMap",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
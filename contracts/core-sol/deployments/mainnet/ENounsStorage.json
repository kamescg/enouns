{
  "address": "0x0A3895005C766DBF9c3aef8c953a156F4a0A0988",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_svgRender_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_traitsFetch_",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "externalLink",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "sellerFeeBasisPoints",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "feeRecipient",
              "type": "string"
            }
          ],
          "internalType": "struct ERC721Storage.ContractURI",
          "name": "_contractURI_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "externalLink",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "sellerFeeBasisPoints",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "feeRecipient",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct ERC721Storage.ContractURI",
          "name": "contractURI",
          "type": "tuple"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "svgRender",
          "type": "address"
        }
      ],
      "name": "SvgRenderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "traitsFetch",
          "type": "address"
        }
      ],
      "name": "TraitsFetchUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "constructContractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "input0",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "input1",
          "type": "bytes"
        }
      ],
      "name": "constructTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractDescription",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "externalLink",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "sellerFeeBasisPoints",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "feeRecipient",
              "type": "string"
            }
          ],
          "internalType": "struct ERC721Storage.ContractURI",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSvgRender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTraitsFetch",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "preview",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "externalLink",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "sellerFeeBasisPoints",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "feeRecipient",
              "type": "string"
            }
          ],
          "internalType": "struct ERC721Storage.ContractURI",
          "name": "contractURI",
          "type": "tuple"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "svgRender",
          "type": "address"
        }
      ],
      "name": "setSvgRender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "traitsFetch",
          "type": "address"
        }
      ],
      "name": "setTraitsFetch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdff7e1c18f11aadbf267743a9be6211b67fa42efbebf8b63d10b1ecc6625b247",
  "receipt": {
    "to": null,
    "from": "0x761d584f1C2d43cBc3F42ECd739701a36dFFAa31",
    "contractAddress": "0x0A3895005C766DBF9c3aef8c953a156F4a0A0988",
    "transactionIndex": 90,
    "gasUsed": "1782760",
    "logsBloom": "0x
    "blockHash": "0x0a482414f7f71c80766f21acc7dfd9632235cc17824715509eabb958ddd9d02e",
    "transactionHash": "0xdff7e1c18f11aadbf267743a9be6211b67fa42efbebf8b63d10b1ecc6625b247",
    "logs": [
      {
        "transactionIndex": 90,
        "blockNumber": 15269279,
        "transactionHash": "0xdff7e1c18f11aadbf267743a9be6211b67fa42efbebf8b63d10b1ecc6625b247",
        "address": "0x0A3895005C766DBF9c3aef8c953a156F4a0A0988",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000761d584f1c2d43cbc3f42ecd739701a36dffaa31"
        ],
        "data": "0x",
        "logIndex": 91,
        "blockHash": "0x0a482414f7f71c80766f21acc7dfd9632235cc17824715509eabb958ddd9d02e"
      }
    ],
    "blockNumber": 15269279,
    "cumulativeGasUsed": "6538010",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd597CbDCc7ab73B9a8B0c1627f435e19Fd302d93",
    "0x7F7f856cD1B2B36a4E4bFf3a1e89Df88E919F577",
    {
      "name": "eNouns",
      "description": "Ethereum Noun System; one Noun for every Primary ENS Name.",
      "image": "https://ipfs.io/ipfs/QmR5suybqBDHkMB7fiXCjKuXEXwRPmJ8ExsRbPasxu36rm",
      "externalLink": "https://enouns.art",
      "sellerFeeBasisPoints": "0",
      "feeRecipient": "0x0000000000000000000000000000000000000000"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "9ff91e743f89171638eb63f409bd4bb1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_svgRender_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_traitsFetch_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalLink\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellerFeeBasisPoints\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feeRecipient\",\"type\":\"string\"}],\"internalType\":\"struct ERC721Storage.ContractURI\",\"name\":\"_contractURI_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalLink\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellerFeeBasisPoints\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feeRecipient\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct ERC721Storage.ContractURI\",\"name\":\"contractURI\",\"type\":\"tuple\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"svgRender\",\"type\":\"address\"}],\"name\":\"SvgRenderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"traitsFetch\",\"type\":\"address\"}],\"name\":\"TraitsFetchUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"constructContractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"input0\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"input1\",\"type\":\"bytes\"}],\"name\":\"constructTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractDescription\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalLink\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellerFeeBasisPoints\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feeRecipient\",\"type\":\"string\"}],\"internalType\":\"struct ERC721Storage.ContractURI\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSvgRender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTraitsFetch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"preview\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalLink\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellerFeeBasisPoints\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feeRecipient\",\"type\":\"string\"}],\"internalType\":\"struct ERC721Storage.ContractURI\",\"name\":\"contractURI\",\"type\":\"tuple\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"svgRender\",\"type\":\"address\"}],\"name\":\"setSvgRender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"traitsFetch\",\"type\":\"address\"}],\"name\":\"setTraitsFetch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kames Geraghty\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ENounsStorage\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ENounsStorage.sol\":\"ENounsStorage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/ENounsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { ERC721Storage } from \\\"./ERC721Storage.sol\\\";\\n\\n/**\\n * @title ENounsStorage\\n * @author Kames Geraghty\\n */\\ncontract ENounsStorage is ERC721Storage {\\n  constructor(\\n    address _svgRender_,\\n    address _traitsFetch_,\\n    ContractURI memory _contractURI_\\n  ) ERC721Storage(_svgRender_, _traitsFetch_, _contractURI_) {}\\n\\n  function _parseName(uint256 _tokenId) internal view override returns (string memory) {\\n    return string.concat(\\\"eNouns #\\\", Strings.toString(_tokenId));\\n  }\\n\\n  function _parseDescription(uint256 _tokenId) internal view override returns (string memory) {\\n    return\\n      string.concat(\\n        \\\"Member #\\\",\\n        Strings.toString(_tokenId),\\n        \\\" of the Ethereum Noun System art club.\\\"\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x7d2d2186ca4886c0be07497af395b3226944966102381ae2a5174ec9f65fb479\",\"license\":\"GPL-3.0\"},\"contracts/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport { Base64 } from \\\"base64-sol/base64.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ISVGRender } from \\\"./interfaces/ISVGRender.sol\\\";\\nimport { ITraitsFetch } from \\\"./interfaces/ITraitsFetch.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721Storage\\n * @author Kames Geraghty\\n */\\nabstract contract ERC721Storage is Ownable {\\n  address internal _svgRender;\\n  address internal _traitsFetch;\\n  ContractURI internal _contractURI;\\n\\n  struct ContractURI {\\n    string name;\\n    string description;\\n    string image;\\n    string externalLink;\\n    string sellerFeeBasisPoints;\\n    string feeRecipient;\\n  }\\n\\n  event SvgRenderUpdated(address svgRender);\\n\\n  event TraitsFetchUpdated(address traitsFetch);\\n\\n  event ContractURIUpdated(ContractURI contractURI);\\n\\n  constructor(\\n    address _svgRender_,\\n    address _traitsFetch_,\\n    ContractURI memory _contractURI_\\n  ) {\\n    _svgRender = _svgRender_;\\n    _traitsFetch = _traitsFetch_;\\n    _contractURI = _contractURI_;\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Virtual Functions                                                                     */\\n  /* ===================================================================================== */\\n\\n  function _parseName(uint256 _tokenId) internal view virtual returns (string memory);\\n\\n  function _parseDescription(uint256 _tokenId) internal view virtual returns (string memory);\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n  function getSvgRender() external view returns (address) {\\n    return _svgRender;\\n  }\\n\\n  function getTraitsFetch() external view returns (address) {\\n    return _traitsFetch;\\n  }\\n\\n  function getContractDescription() external view returns (ContractURI memory) {\\n    return _contractURI;\\n  }\\n\\n  function preview(bytes memory input) external view returns (string memory) {\\n    return ISVGRender(_svgRender).render(input);\\n  }\\n\\n  function constructTokenURI(\\n    uint256 tokenId,\\n    bytes memory input0,\\n    bytes memory input1\\n  ) external view returns (string memory uri) {\\n    string memory image_ = ISVGRender(_svgRender).render(input0);\\n    string memory traits_ = ITraitsFetch(_traitsFetch).fetch(input1);\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              string.concat(\\n                '{\\\"name\\\":',\\n                '\\\"',\\n                _parseName(tokenId),\\n                '\\\",',\\n                '\\\"description\\\":',\\n                '\\\"',\\n                _parseDescription(tokenId),\\n                '\\\",',\\n                '\\\"image\\\":',\\n                '\\\"',\\n                image_,\\n                '\\\",',\\n                '\\\"attributes\\\": [',\\n                traits_,\\n                \\\"]\\\",\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function constructContractURI() external view returns (string memory uri) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              string.concat(\\n                '{\\\"name\\\":',\\n                '\\\"',\\n                _contractURI.name,\\n                '\\\",',\\n                '\\\"description\\\":',\\n                '\\\"',\\n                _contractURI.description,\\n                '\\\",',\\n                '\\\"image\\\":',\\n                '\\\"',\\n                _contractURI.image,\\n                '\\\",',\\n                '\\\"externalLink\\\":',\\n                '\\\"',\\n                _contractURI.externalLink,\\n                '\\\",',\\n                '\\\"sellerFeeBasisPoints\\\":',\\n                '\\\"',\\n                _contractURI.sellerFeeBasisPoints,\\n                '\\\",',\\n                '\\\"feeRecipient\\\":',\\n                '\\\"',\\n                _contractURI.feeRecipient,\\n                '\\\"',\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function setSvgRender(address svgRender) external onlyOwner {\\n    _svgRender = svgRender;\\n    emit SvgRenderUpdated(svgRender);\\n  }\\n\\n  function setTraitsFetch(address traitsFetch) external onlyOwner {\\n    _traitsFetch = traitsFetch;\\n    emit TraitsFetchUpdated(traitsFetch);\\n  }\\n\\n  function setContractURI(ContractURI memory contractURI) external onlyOwner {\\n    _contractURI = contractURI;\\n    emit ContractURIUpdated(contractURI);\\n  }\\n}\\n\",\"keccak256\":\"0x6af50039764df03c6057da9ed79722cf80685849ecb38122a2f61601aa97d432\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISVGRender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface ISVGRender {\\n  function render(bytes memory input) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x40b1890b472a84f0867a826065039eb787f1f3c4f1a79a71b877752c70152967\",\"license\":\"MIT\"},\"contracts/interfaces/ITraitsFetch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface ITraitsFetch {\\n  function fetch(bytes memory input) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x8454d6dcf4c798032b7459026b6fa23f586b76400175a27c9b100c1aca36c5a9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063a3f22a2011610071578063a3f22a201461013d578063ae70ed131461014e578063b351735014610161578063d12bcb1214610174578063f067961614610189578063f2fde38b1461019c57600080fd5b80633ee6fa92146100b957806357e30f44146100ce578063715018a6146100e1578063725fa09c146100e95780638da5cb5b146101075780639a17092a1461012c575b600080fd5b6100cc6100c7366004610d42565b6101af565b005b6100cc6100dc366004610e60565b610237565b6100cc610310565b6100f1610346565b6040516100fe9190610fdd565b60405180910390f35b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100fe565b6001546001600160a01b0316610114565b6002546001600160a01b0316610114565b6100cc61015c366004610d42565b6103a6565b6100f161016f366004610ff0565b61041e565b61017c61049a565b6040516100fe9190611025565b6100f16101973660046110dd565b610851565b6100cc6101aa366004610d42565b61099d565b6000546001600160a01b031633146101e25760405162461bcd60e51b81526004016101d99061114a565b60405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f10c0817f42b2182992d55b707430b153f12e59d7e54a975bfec790497dd7f63f906020015b60405180910390a150565b6000546001600160a01b031633146102615760405162461bcd60e51b81526004016101d99061114a565b8051819060039081906102749082611208565b50602082015160018201906102899082611208565b506040820151600282019061029e9082611208565b50606082015160038201906102b39082611208565b50608082015160048201906102c89082611208565b5060a082015160058201906102dd9082611208565b509050507f03a10335d532669eac03b3b7e4ce44aff7f8cb14b7aa397c653fdcb40ae06bec8160405161022c9190611025565b6000546001600160a01b0316331461033a5760405162461bcd60e51b81526004016101d99061114a565b6103446000610a38565b565b6040516060906103829061036e9060039060049060059060069060079060089060200161133b565b604051602081830303815290604052610a88565b60405160200161039291906114c1565b604051602081830303815290604052905090565b6000546001600160a01b031633146103d05760405162461bcd60e51b81526004016101d99061114a565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f3c2715cb5e4b39dd4af38ac12bb292a030fb6a063dbd5467ed49da665bcaa9739060200161022c565b6001546040516318b6fb0f60e11b81526060916001600160a01b03169063316df61e9061044f908590600401610fdd565b600060405180830381865afa15801561046c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104949190810190611506565b92915050565b6104d36040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b60036040518060c00160405290816000820180546104f09061117f565b80601f016020809104026020016040519081016040528092919081815260200182805461051c9061117f565b80156105695780601f1061053e57610100808354040283529160200191610569565b820191906000526020600020905b81548152906001019060200180831161054c57829003601f168201915b505050505081526020016001820180546105829061117f565b80601f01602080910402602001604051908101604052809291908181526020018280546105ae9061117f565b80156105fb5780601f106105d0576101008083540402835291602001916105fb565b820191906000526020600020905b8154815290600101906020018083116105de57829003601f168201915b505050505081526020016002820180546106149061117f565b80601f01602080910402602001604051908101604052809291908181526020018280546106409061117f565b801561068d5780601f106106625761010080835404028352916020019161068d565b820191906000526020600020905b81548152906001019060200180831161067057829003601f168201915b505050505081526020016003820180546106a69061117f565b80601f01602080910402602001604051908101604052809291908181526020018280546106d29061117f565b801561071f5780601f106106f45761010080835404028352916020019161071f565b820191906000526020600020905b81548152906001019060200180831161070257829003601f168201915b505050505081526020016004820180546107389061117f565b80601f01602080910402602001604051908101604052809291908181526020018280546107649061117f565b80156107b15780601f10610786576101008083540402835291602001916107b1565b820191906000526020600020905b81548152906001019060200180831161079457829003601f168201915b505050505081526020016005820180546107ca9061117f565b80601f01602080910402602001604051908101604052809291908181526020018280546107f69061117f565b80156108435780601f1061081857610100808354040283529160200191610843565b820191906000526020600020905b81548152906001019060200180831161082657829003601f168201915b505050505081525050905090565b6001546040516318b6fb0f60e11b81526060916000916001600160a01b039091169063316df61e90610887908790600401610fdd565b600060405180830381865afa1580156108a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108cc9190810190611506565b60025460405163f6559a6b60e01b81529192506000916001600160a01b039091169063f6559a6b90610902908790600401610fdd565b600060405180830381865afa15801561091f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109479190810190611506565b905061097361095587610bed565b61095e88610c1e565b848460405160200161036e9493929190611574565b60405160200161098391906114c1565b604051602081830303815290604052925050509392505050565b6000546001600160a01b031633146109c75760405162461bcd60e51b81526004016101d99061114a565b6001600160a01b038116610a2c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101d9565b610a3581610a38565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60608151600003610aa757505060408051602081019091526000815290565b60006040518060600160405280604081526020016117cd6040913990506000600384516002610ad6919061167b565b610ae091906116a9565b610aeb9060046116bd565b90506000610afa82602061167b565b67ffffffffffffffff811115610b1257610b12610d72565b6040519080825280601f01601f191660200182016040528015610b3c576020820181803683370190505b509050818152600183018586518101602084015b81831015610ba8576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825350600101610b50565b600389510660018114610bc25760028114610bd357610bdf565b613d3d60f01b600119830152610bdf565b603d60f81b6000198301525b509398975050505050505050565b6060610bf882610c39565b604051602001610c0891906116dc565b6040516020818303038152906040529050919050565b6060610c2982610c39565b604051602001610c08919061170c565b606081600003610c605750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610c8a5780610c7481611772565b9150610c839050600a836116a9565b9150610c64565b60008167ffffffffffffffff811115610ca557610ca5610d72565b6040519080825280601f01601f191660200182016040528015610ccf576020820181803683370190505b5090505b8415610d3a57610ce460018361178b565b9150610cf1600a866117a2565b610cfc90603061167b565b60f81b818381518110610d1157610d116117b6565b60200101906001600160f81b031916908160001a905350610d33600a866116a9565b9450610cd3565b949350505050565b600060208284031215610d5457600080fd5b81356001600160a01b0381168114610d6b57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715610dab57610dab610d72565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610dda57610dda610d72565b604052919050565b600067ffffffffffffffff821115610dfc57610dfc610d72565b50601f01601f191660200190565b600082601f830112610e1b57600080fd5b8135610e2e610e2982610de2565b610db1565b818152846020838601011115610e4357600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215610e7257600080fd5b813567ffffffffffffffff80821115610e8a57600080fd5b9083019060c08286031215610e9e57600080fd5b610ea6610d88565b823582811115610eb557600080fd5b610ec187828601610e0a565b825250602083013582811115610ed657600080fd5b610ee287828601610e0a565b602083015250604083013582811115610efa57600080fd5b610f0687828601610e0a565b604083015250606083013582811115610f1e57600080fd5b610f2a87828601610e0a565b606083015250608083013582811115610f4257600080fd5b610f4e87828601610e0a565b60808301525060a083013582811115610f6657600080fd5b610f7287828601610e0a565b60a08301525095945050505050565b60005b83811015610f9c578181015183820152602001610f84565b83811115610fab576000848401525b50505050565b60008151808452610fc9816020860160208601610f81565b601f01601f19169290920160200192915050565b602081526000610d6b6020830184610fb1565b60006020828403121561100257600080fd5b813567ffffffffffffffff81111561101957600080fd5b610d3a84828501610e0a565b602081526000825160c0602084015261104160e0840182610fb1565b90506020840151601f198085840301604086015261105f8383610fb1565b9250604086015191508085840301606086015261107c8383610fb1565b925060608601519150808584030160808601526110998383610fb1565b925060808601519150808584030160a08601526110b68383610fb1565b925060a08601519150808584030160c0860152506110d48282610fb1565b95945050505050565b6000806000606084860312156110f257600080fd5b83359250602084013567ffffffffffffffff8082111561111157600080fd5b61111d87838801610e0a565b9350604086013591508082111561113357600080fd5b5061114086828701610e0a565b9150509250925092565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c9082168061119357607f821691505b6020821081036111b357634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561120357600081815260208120601f850160051c810160208610156111e05750805b601f850160051c820191505b818110156111ff578281556001016111ec565b5050505b505050565b815167ffffffffffffffff81111561122257611222610d72565b61123681611230845461117f565b846111b9565b602080601f83116001811461126b57600084156112535750858301515b600019600386901b1c1916600185901b1785556111ff565b600085815260208120601f198616915b8281101561129a5788860151825594840194600190910190840161127b565b50858210156112b85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600081546112d58161117f565b600182811680156112ed576001811461130257611331565b60ff1984168752821515830287019450611331565b8560005260208060002060005b858110156113285781548a82015290840190820161130f565b50505082870194505b5050505092915050565b673d913730b6b2911d60c11b8152601160f91b6008820152600061136260098301896112c8565b61088b60f21b815260026113888183016d113232b9b1b934b83a34b7b7111d60911b9052565b601160f91b601083015261139f601183018a6112c8565b61088b60f21b81529150671134b6b0b3b2911d60c11b82820152601160f91b600a8301526113d0600b8301896112c8565b61088b60f21b815291506e1132bc3a32b93730b62634b735911d60891b82820152601160f91b601183015261140860128301886112c8565b61088b60f21b815291507f2273656c6c65724665654261736973506f696e7473223a00000000000000000082820152601160f91b601983015261144e601a8301876112c8565b61088b60f21b815291506e113332b2a932b1b4b834b2b73a111d60891b82820152601160f91b601183015261148660128301866112c8565b601160f91b8152607d60f81b6001820152019998505050505050505050565b600081516114b7818560208601610f81565b9290920192915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516114f981601d850160208701610f81565b91909101601d0192915050565b60006020828403121561151857600080fd5b815167ffffffffffffffff81111561152f57600080fd5b8201601f8101841361154057600080fd5b805161154e610e2982610de2565b81815285602083850101111561156357600080fd5b6110d4826020830160208601610f81565b673d913730b6b2911d60c11b8152601160f91b600882015284516000906115a2816009850160208a01610f81565b61088b60f21b6009918401918201526d113232b9b1b934b83a34b7b7111d60911b600b8201526115d860198201601160f91b9052565b6115e5601a8201876114a5565b61088b60f21b81529050671134b6b0b3b2911d60c11b6002820152601160f91b600a820152611617600b8201866114a5565b61088b60f21b815290506e2261747472696275746573223a205b60881b600282015261164660118201856114a5565b605d60f81b8152607d60f81b6001820152600201979650505050505050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561168e5761168e611665565b500190565b634e487b7160e01b600052601260045260246000fd5b6000826116b8576116b8611693565b500490565b60008160001904831182151516156116d7576116d7611665565b500290565b67654e6f756e73202360c01b8152600082516116ff816008850160208701610f81565b9190910160080192915050565b674d656d626572202360c01b81526000825161172f816008850160208701610f81565b7f206f662074686520457468657265756d204e6f756e2053797374656d206172746008939091019283015250651031b63ab11760d11b6028820152602e01919050565b60006001820161178457611784611665565b5060010190565b60008282101561179d5761179d611665565b500390565b6000826117b1576117b1611693565b500690565b634e487b7160e01b600052603260045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122063f968f33b12d650536d05c774dab9ac8055aac681718df0789eb4d07c4e2fa564736f6c634300080f0033",
  "devdoc": {
    "author": "Kames Geraghty",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ENounsStorage",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ENounsStorage.sol:ENounsStorage",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3130,
        "contract": "contracts/ENounsStorage.sol:ENounsStorage",
        "label": "_svgRender",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3132,
        "contract": "contracts/ENounsStorage.sol:ENounsStorage",
        "label": "_traitsFetch",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3135,
        "contract": "contracts/ENounsStorage.sol:ENounsStorage",
        "label": "_contractURI",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(ContractURI)3148_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ContractURI)3148_storage": {
        "encoding": "inplace",
        "label": "struct ERC721Storage.ContractURI",
        "members": [
          {
            "astId": 3137,
            "contract": "contracts/ENounsStorage.sol:ENounsStorage",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3139,
            "contract": "contracts/ENounsStorage.sol:ENounsStorage",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3141,
            "contract": "contracts/ENounsStorage.sol:ENounsStorage",
            "label": "image",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3143,
            "contract": "contracts/ENounsStorage.sol:ENounsStorage",
            "label": "externalLink",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3145,
            "contract": "contracts/ENounsStorage.sol:ENounsStorage",
            "label": "sellerFeeBasisPoints",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 3147,
            "contract": "contracts/ENounsStorage.sol:ENounsStorage",
            "label": "feeRecipient",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      }
    }
  }
}